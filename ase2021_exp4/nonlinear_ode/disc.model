bool m;
[-300, 300] x1;
[-300, 300] y1;
[-10, 10] dx1;
[-10, 10] dy1;
[-2, 2] w1;
[-300, 300] x2;
[-300, 300] y2;
[-10, 10] dx2;
[-10, 10] dy2;
[-2, 2] w2;
const real v1 = 2;
const real v2 = 1;
const real minr1 = 2.5;
const real minr2 = 2.5;
const real p = 3;
# free mode
{
    mode:
	m = false;
    inv:
	(x2 - x1) + (y2 - y1) > (2 * minr1 + 2 * minr2 + p);
    flow:
        d/dt[x1] = v1 * dx1;
        d/dt[y1] = v1 * dy1;
        d/dt[x2] = v2 * dx2;
	d/dt[y2] = v2 * dy2;
	d/dt[w1] = 0;
	d/dt[w2] = 0;
	d/dt[dx1] = -w1 * dy1;
	d/dt[dy1] = w1 * dx1;
	d/dt[dx2] = -w2 * dy2;
	d/dt[dy2] = w2 * dx2;
    jump:
	(and ((x1 - x2) < (2 * minr1 + 2 * minr2 + p)) ((x1 - x2) > -(2 * minr1 + 2 * minr2 + p)) ((y1 - y2) < (2 * minr1 + 2 * minr2 + p)) ((y1 - y2) > -(2 * minr1 + 2 * minr2 + p))) =>
               (and m' (or (w1' = -0.5) (w1' = 0.5)) (or (w2' = 0.5) (w2' = -0.5)) (x1' = x1) (y1' = y1) (dx1' = dx1) (dy1' = dy1) (x2' = x2) (y2' = y2) (dx2' = dx2) (dy2' = dy2));
}
# rotation mode
{
    mode:
	m = true;
    inv:
	(x2 - x1) + (y2 - y1) <= (2 * minr1 + 2 * minr2 + p);
    flow:
        d/dt[x1] = v1 * dx1;
        d/dt[y1] = v1 * dy1;
        d/dt[x2] = v2 * dx2;
        d/dt[y2] = v2 * dy2;
        d/dt[w1] = 0;
        d/dt[w2] = 0;
        d/dt[dx1] = -w1 * dy1;
        d/dt[dy1] = w1 * dx1;
        d/dt[dx2] = -w2 * dy2;
        d/dt[dy2] = w2 * dx2;
    jump:
        (and ((x1 - x2) > (2 * minr1 + 2 * minr2 + p)) ((x1 - x2) < -(2 * minr1 + 2 * minr2 + p)) ((y1 - y2) > (2 * minr1 + 2 * minr2 + p)) ((y1 - y2) < -(2 * minr1 + 2 * minr2 + p))) =>
               (and (m' = false) (w1' = 0) (w2' = 0) (x1' = x1) (y1' = y1) (dx1' = dx1) (dy1' = dy1) (x2' = x2) (y2' = y2) (dx2' = dx2) (dy2' = dy2));
}

init:
(and (m = false) (w1 = 0) (w2 = 0) (0 <= x1) (x1 <= 1) (0 <= y1) (y1 <= 1) (15 <= x2) (x2 <= 20) (15 <= y2) (y2 <= 20) (1 <= dx1) (dx1 <= 2) (1 <= dy1) (dy1 <= 2) (-2 <= dx2) (dx2 <= -1) (-2 <= dy2) (dy2 <= -1));


propositions:
xl40 = x1 < 40;

# timebound :50
goal:
[] [10, 30] (((x2 - x1) + (y2 - y1)) >= 10);
<>[1.5, 20] (x1 > 10);
(<>[0, 20] x1 > 5) U[1, 10] (y1 > 5);
(<> [0, 20] ((dx2 - dx1) < 4 U [0, 10] (and xl40 (x1 > -40) (y1 < 40) (y1 < -40)))); # true

