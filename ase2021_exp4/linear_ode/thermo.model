# model description:
#
# Two rooms are connected by an open door.
# The room' temperature is controlled by
# its own heater and changes over time.
# It is also affected by each other's room
# temperature.

bool a;
[10, 30] x1;
bool b;
[10, 30] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 >= 16;
        (x2 >= 16);
    flow:
        d/dt[x1] = -0.015 * ((1 - 2 * 0.01) * x1 + 0.01 * x2);
        d/dt[x2] = -0.045 * ((1 - 2* 0.01) * x2 + 0.01 * x1);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2)); 
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2)); 
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2)); 

}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 >= 16;
        (x2 <= 25);
    flow:
        d/dt[x1] = -0.015 * ((1 - 2 * 0.01) * x1 + 0.01 * x2);
        d/dt[x2] = 0.045 * (200 -((1 - 2 * 0.01) * x2 + 0.01 * x1));
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2)); 
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2)); 
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 <= 25;
        (x2 >= 16);
    flow:
        d/dt[x1] = 0.015 * (100 -((1 - 2 * 0.01) * x1 + 0.01 * x2));
        d/dt[x2] = -0.045 * ((1 - 2* 0.01) * x2 + 0.01 * x1);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2)); 
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 <= 25;
        (x2 <= 25);
    flow:
        d/dt[x1] = 0.015 * (100 -((1 - 2 * 0.01) * x1 + 0.01 * x2));
        d/dt[x2] = 0.045 * (200 -((1 - 2 * 0.01) * x2 + 0.01 * x1));
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
init:
(and (a = false) (b = false) (x1 <= 20 + 0.1) (x1 >= 20 - 0.1) (x2 <= 20 + 0.1) (x2 >= 20 - 0.1));

propositions:
reachability = x1 >= 21;
p = x2 > 19 ;
q = x1 <= 21;
x1T = x1 > 27 ;
x2T = x2 > 27 ;

# timebound : 20
goal:
(<> [0.0, 10.0] p);  # false
([] [10, 15] q); # true
([] [0, 10] ((x1 < 24) U [0, 5) r)); # false
(<> (5, 10) (s R [0, 5] (x2 > 18))); # true





