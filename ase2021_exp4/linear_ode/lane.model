# model description:
#
# #modes = 7
#
# 1 -> 2 -> 3 -> 6 -> 5 -> 4 -> 7 

real m;
[-100, 100] vx;
[-100, 100] sx;
[-100, 100] ax;
[-100, 100] omega;
[-100, 100] vy;
[-100, 100] sy;

# slow down
{
    mode:
	m = 1;
    inv:
	sx + 10 < 0; 
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
	d/dt[ax] = - 0.01 * sx - 0.103 + 0.84 - 0.3 * vx - 0.5 * ax;
	d/dt[omega] = -2 * omega;
	d/dt[vy] = -2 * vy;
	d/dt[sy] = 0.1 *vy;
    jump:
	(sx + 10 >= 0) =>
		(and (m' = 2) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy));
}
# start turn 1
{
    mode:
	m = 2;
    inv:
	sy < 12;
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = -0.5 * vx + 1.4 - 0.5 * ax;
        d/dt[omega] = 3 - 0.15 * omega + 0.2 - 0.01 * sy;
        d/dt[vy] = 7.5 - 0.45 * omega + 0.5 - 0.0025 * sy - 0.05 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
	(sy >= 12) =>
		(and (m' = 3) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy));
}
# end turn 1
{
    mode:
	m = 3;
    inv:
	vy > 0.05;
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = -0.5 * vx + 1.4 - 0.5 * ax;
        d/dt[omega] = -0.1*omega + 0.2 - 0.01 * sy;
        d/dt[vy] = -0.25 * omega + 0.5 - 0.025 * sy - 0.05 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
	(vy <= 0.05) =>
		(and (m' = 6) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy));
}
# end turn 2
{
    mode:
	m = 4;
    inv:
	vy + 0.05 < 0;
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = -0.5 * vx + 1.4 - 0.5 * ax;
        d/dt[omega] = -0.1*omega + 0.2 - 0.01 * sy;
        d/dt[vy] = -0.25 * omega + 0.5 - 0.025 * sy - 0.05 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
	(vy + 0.05 >= 0) =>
		(and (m' = 7) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy));
}
# start turn 2
{
    mode:
	m = 5;
    inv:
        sy > 3.5;
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = -0.5 * vx + 1.4 - 0.5 * ax;
        d/dt[omega] = 3 - 0.15 * omega + 0.2 - 0.01 * sy;
        d/dt[vy] = 7.5 - 0.45 * omega + 0.5 - 0.0025 * sy - 0.05 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
	(sy <= 3.5) =>
		(and (m' = 4) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy)); 
}
# speed up
{
    mode:
	m = 6;
    inv:
        sx < 10 ;
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = - 0.01 * sx - 0.103 + 0.84 - 0.3 * vx - 0.5 * ax;
        d/dt[omega] = -2 * omega;
        d/dt[vy] = -2 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
         (sx >= 10) =>
		(and (m' = 5) (vx' = vx) (sx' = sx) (ax' = ax) (omega' = omega) (vy' = vy) (sy' = sy));
}
# continue
{
    mode:
	m = 7;
    inv:
    flow:
        d/dt[vx] = 0.1 * ax;
        d/dt[sx] = vx - 2.5;
        d/dt[ax] = - 0.5 * vx + 1.4 - 0.5 * ax;
        d/dt[omega] = -2 * omega;
        d/dt[vy] = -2 * vy;
        d/dt[sy] = 0.1 *vy;
    jump:
}
init:
(and (m = 1) (-15 <= sx) (sx <= -14) (3.25 <= vx) (vx <= 3.3) (0 <= ax) (ax <= 0.1) (0 <= vy) (vy <= 0.1) (0 <= omega) (omega <= 0.1) (0 <= sy) (sy <= 0.1));  

propositions:
reachability = sx >= 0;
p = sy < 10;
q = sx < 22;
r = sy > -1;
s = sy > -5;

#timebound : 40
goal:
(<> [0.0, 40.0] p);  # false
([] [10, 30] q); # true
([] [0, 10] (sx < 6 U [0, 15) r)); # false
(<> (5, 10) (s R [0, 10] sx < 6)); # true

