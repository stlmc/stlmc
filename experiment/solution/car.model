bool r;
bool d;
[0, 100] x1;
[0, 100] y1;
[0.5, 10] vx1;
[-10, 10] vy1;
[0, 100] x2;
[0, 100] y2;

#  car1 : straight
{
    mode:
	r = false;
	d = false;
    inv:
    flow:
	x1(t) = vx1(0) * t + x1(0);
	y1(t) = vy1(0) * t + y1(0);
	x2(t) = 3 * t + x2(0);
	y2(t) = 3 * t + y2(0);
	vx1(t) = vx1(0);
	vy1(t) = vy1(0);
    jump:
        (y2 - y1) >= 1 =>
                (and (r' = true) (d' = false) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
			(vx1' = vx1) (vy1' = 7));
        (y2 - y1) <= -1 =>
                (and (r' = true) (d' = true) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = -1));
}
# car1 : left, d/dt[vx1] = -0.7, d/dt[vy1] = 1;
{
    mode:
	r = true;
	d = false;
    inv:
    flow:
        x1(t) = vx1(0) * t - 0.8 * t * t + x1(0);
        y1(t) = vy1(0) * t + 0.5 * t * t + y1(0);
        x2(t) = 2 * t + x2(0);
        y2(t) = 2 * t + y2(0);
        vx1(t) = vx1(0) - 0.5 * t;
        vy1(t) = vy1(0) + t;
    jump:
        (and ((y2 - y1) < 1) ((y2 - y1) > -1)) =>
                (and (r' = false) (d' = false) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = 0));
        (y2 - y1) <= -1 =>
                (and (r' = true) (d' = true) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = -1));

}
# car1 : right, d/dt[vx1] = -0.7, d/dt[vy1] = -1;
{
    mode:
	r = true;
	d = true;
    inv:
    flow:
        x1(t) = vx1(0) * t - 0.15 * t * t + x1(0);
        y1(t) = vy1(0) * t - 0.5 * t * t +  y1(0);
        x2(t) = 2 * t + x2(0);
        y2(t) = 2 * t + y2(0);
        vx1(t) = vx1(0) - 0.5 * t;
        vy1(t) = vy1(0) - t;

    jump:
        (y2 - y1) >= 1 =>
                (and (r' = true) (d' = false) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = 2));
        (and ((y2 - y1) < 1) ((y2 - y1) > -1)) =>
                (and (r' = false) (d' = false) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = 0));
	#(y2 - y1) <= -1 =>
        #        (and (d' = 1) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
        #                (vx1' = vx1) (vy1' = -2));
}


init:
#(and not(r) not(d) (x1 = 0) (y1 = 0) (x2 = 1) (y2 = 1) (vx1 = 3.5) (vy1 = 0));
(and not(r) not(d) (x1 <= 0) (y1 <= 0) (x2 >= 1) (y2 >= 1) (vx1 > 0) (vx1 < 4) (vy1 >= 0) (vy1 <= 1));

propositions:
xg80 = x > 50;
yl50 = y < 50;
xg60 = x > 60;
xg70 = x > 70;

# timebound 20
goal:
~r U [0, 14] (y2 - y1 < 2); # true
<> [0, 20] (d -> (y2 - y1) < 3); # true
[] [0, 20] ((y2 <= y1 -> [][0, 20] vy < 7) or <>[0, 20] vy >= 7);
[] [0, 20] (y2 > y1);
([] [0, 20] y2 > y1) and (y1 <= 0 or y1 > 0);
[] [0, 20] (y2 > y1 and (y1 >= -1 or y1 < 0 ));
[] [0, 20] (y2 > y1 and (y1 >= 0 or y1 < 1 ));
[] [0, 20] (y2 > y1 and (y2 < 0 or y2 >= 0));
[] [0, 20] (y2 > y1 and (y1 >= 0 or y1 < 0 ));
[] [0, 20] (y2 > y1 and True);
[] [0, 20] ((y2 <= y1 -> [][0, 20] vy < 7) or <>[0, 20] vy >= 7);
#[] [1, 20] (y2 > y1 => ) and [] [0, 1] (y2 > y1); # false at 2
(<> [1, 4] ~d) U [0, 10] (x2 - x1) < 3; # false at 3
