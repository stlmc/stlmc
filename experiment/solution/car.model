real d;
[0, 100] x1;
[0, 100] y1;
[0.5, 10] vx1;
[-10, 10] vy1;
[0, 100] x2;
[0, 100] y2;

#  car1 : straight
{
    mode:
        d = 0;
    inv:
        x2 - x1 > 0.3;
        x2 - x1 < 4;
        y2 - y1 > -1.5;
        y2 - y1 < 1.5;
    flow:
        d/dt[x1] = vx1; 
        d/dt[y1] = vy1; 
        d/dt[x2] = 2;
        d/dt[y2] = 2;
	d/dt[vx1] = 0;
	d/dt[vy1] = 0;
    jump:
        (y2 - y1) >= 1 =>
                (and (d' = -1) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
			(vx1' = vx1) (vy1' = vy1));
        (y2 - y1) <= -1 =>
                (and (d' = 1) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = vy1));
}
# car1 : left, d/dt[vx1] = -0.7, d/dt[vy1] = 1;
{
    mode:
        d = -1;
    inv:
        x2 - x1 > 0.3;
        x2 - x1 < 4;
        y2 - y1 > -1.5;
        y2 - y1 < 1.5;
    flow:
        d/dt[x1] = vx1;
        d/dt[y1] = vy1;
        d/dt[x2] = 2;
        d/dt[y2] = 2;
        d/dt[vx1] = -0.7;
        d/dt[vy1] = 1;
    jump:
        (and ((y2 - y1) < 1) ((y2 - y1) > -1)) =>
                (and (d' = 0) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = vy1));
        (y2 - y1) <= -1 =>
                (and (d' = 1) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = vy1));

}
# car1 : right, d/dt[vx1] = -0.7, d/dt[vy1] = -1;
{
    mode:
        d = 1;
    inv:
        x2 - x1 > 0.3;
        x2 - x1 < 4;
        y2 - y1 > -1.5;
        y2 - y1 < 1.5;
    flow:
        d/dt[x1] = vx1;
        d/dt[y1] = vy1;
        d/dt[x2] = 2;
        d/dt[y2] = 2;
        d/dt[vx1] = -0.7;
        d/dt[vy1] = -1;
    jump:
        (y2 - y1) >= 1 =>
                (and (d' = -1) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = vy1));
        (and ((y2 - y1) < 1) ((y2 - y1) > -1)) =>
                (and (d' = 0) (x1' = x1) (y1' = y1) (x2' = x2) (y2' = y2)
                        (vx1' = vx1) (vy1' = vy1));
}


init:
(and (d = 0) (x1 = 0) (y1 = 0) (x2 = 1) (y2 = 1) (vx1 = 3) (vy1 = 0));

propositions:
xg80 = x > 50;
yl50 = y < 50;
xg60 = x > 60;
xg70 = x > 70;

# timebound 20
goal:
[] [0, 10] ((y2 - y1) <= 1.5); # true
<> (0, 10] ((x2 - x1) < 3); # true
[] [0, 4) (<>[2, 6] ((x2 - x1) >= 1.2)); # false at bound 11
(y2 - y1  >= 8) U [5, 10) ((x2 - x1) >= 2); # false at bound 8
[] [1, 3] (<> [5, 7] (y2 - y1 < 3)); # true

