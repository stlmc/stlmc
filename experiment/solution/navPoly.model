
bool dx;
bool dy;
real vxinit;
real vyinit;
[-20, 20] vx;
[-20, 20] vy;
[0, 100] x;
[0, 100] y;
# zone 1
#   x: decrease, y: decrease
{
    mode:
        dx = false;
        dy = false;
    inv:
        x <= 50;
        y >= 50;
    flow:
        d/dt[x] = vxinit;
        d/dt[y] = vyinit;
	d/dt[vx] = -0.3;
	d/dt[vy] = -0.7;
    jump:
        (and (x <= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x >= 50) (y <= 50)) =>
          (and (dx'= true) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x >= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
}
# zone 2
#   x: decrease, y: increase
{
    mode:
        dx = false;
        dy = true;
    inv:
        x >= 50;
        y >= 50;
    flow:
        d/dt[x] = vxinit;
        d/dt[y] = vyinit;
        d/dt[vx] = -0.7;
        d/dt[vy] = 0.3;
    jump:
        (and (x <= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x <= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x >= 50) (y <= 50)) =>
          (and (dx'= true) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
}
# zone 3
#   x: increase, y: decrease
{
    mode:
	dx = true;
	dy = false;
    inv:
	x < 50;
	y < 50;
    flow:
        d/dt[x] = vxinit;
        d/dt[y] = vyinit;
        d/dt[vx] = 0.7;
        d/dt[vy] = -0.3;
    jump:
        (and (x >= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
	(and (x <= 50) (y >= 50)) =>
	  (and (dx'= false) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x >= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
}
# zone 4
#   x: increase, y: increase
{
    mode:
        dx = true;
        dy = true;
    inv:
        x >= 50;
        y <= 50;
    flow:
        d/dt[x] = vxinit;
        d/dt[y] = vyinit;
        d/dt[vx] = 0.3;
        d/dt[vy] = 0.7;
    jump:
        (and (x <= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x <= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = false) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
        (and (x >= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = true) (x' = x) (y' = y) (vx' = vx) (vy' = vy) (vxinit' = vx) (vyinit' = vy));
}


init:
(and (not(dx)) not(dy) (x <= 40) (x >= 30) (y <= 80) (y >= 70) (vx = 0) (vy = 0) (vxinit = 0) (vyinit = 0));

propositions:
xg80 = x > 50;
yl50 = y < 50;
xg60 = x > 60;
xg70 = x > 70;

goal:
#(<> [0.0, 100.0] yl50); # false
# [] [0.0, 100.0] y > 50; # true
#(y > 50) U [0, 40) (x <= 50); # true
#(<> [0, 30] ((x < 20) -> <> [20, 40] xg60)); # false
#<>[0, 50] ([] (5, 30) (x < 50 and (y > 50))); # false

