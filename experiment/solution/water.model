# model description:
#
# Two water tanks are connected by a single pipe.
# The water level of each tank is separately controlled
# by each pump and is affected by the adjacent water level.

bool a;
[0, 10] x1;
bool b;
real startX1;
real startX2;
[0, 10] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 > 1;
        (x2 > 1);
    flow:
        d/dt[x1] = -0.025 * 9.806 / startX1 / 6 ;
        d/dt[x2] = (0.035 * 9.806 / (startX1 - startX2)) ;
    jump:
        x2 < 6 =>
          (and (not a') b' (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (x1 < 5) =>
          (and a' (not b') (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 > 1;
        (x2 < 9);
    flow:
        d/dt[x1] = -0.025 * 9.806 / startX1 / 6 ;
        d/dt[x2] = (1 + 0.025 * 9.806 / (startX1 - startX2)) ;
    jump:
        x2 > 2 =>
          (and (not a') (not b') (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        x1 < 5 =>
          (and a' b' (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 < 8;
        (x2 > 1);
    flow:
        d/dt[x1] = (0.6 - 0.025 * 2 * 9.806 / 2 * startX1);
        d/dt[x2] = (0.035 * 9.806 / (startX1 - startX2)) ;
    jump:
        x1 > 2 =>
          (and (not a') (not b') (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        x2 < 6 =>
          (and a' b' (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 < 9;
        (x2 < 8);
    flow:
        d/dt[x1] = (0.6 - 0.025 * 2 * 9.806 / 2 * startX1); 
        d/dt[x2] = (1 + 0.025 * 9.806 / (startX1 - startX2)) ; 
    jump:
        x1 > 2 =>
          (and (not a') b' (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        x2 < 2 =>
          (and a' (not b') (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
init:
(and (not(a)) not(b) (x1 = 5)  (x2 = 6) (startX1 = x1) (startX2 = x2));

propositions:
x1g2 = x1 > 2;
x1l4 = x1 < 4;
x2l4 = x2 < 4;
x2g6 = x2 > 6;

# timebound : 20
goal:
(<> [2, 20] x1 < 5); # true
([] [2,8] x2 > 4); # false at bound 5
(<> [0, 10] ((x1 > 6) R [3, 10) x1 > 4)); # true
([] [5, 8] (<> (0, 10] x2g6)); # false at bound 2
