bool ix;
bool iy;
[-100, 100] x1;
[-100, 100] y1;
[-30, 30] vx1;
[-30, 30] vy1;

#  car1 : inc, inc 
{
    mode:
        ix = true;
        iy = true;
    inv:
	vx1 < 8;
	vy1 < 8;
    flow:
	x1(t) = x1(0) + 0.6 * t + 0.02 * t * t;
	y1(t) = y1(0) + 0.8 * t + 0.02 * t * t;
	vx1(t) = vx1(0) + 0.5 * t;
	vy1(t) = vy1(0) + 0.6 * t;
    jump:
        (and (x1 >= 3) (y1 < 3)) =>
		(and (ix' = false) (iy' = true) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
        (and (x1 < 3) (y1 >= 3)) =>
		(and (ix' = true) (iy' = false) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
}
#  car1 : inc, dec
{
    mode:
        ix = true;
        iy = false;
    inv:
        vx1 < 8;
        vy1 > -8;
    flow:
        d/dt[x1] = vx1;
        d/dt[y1] = vy1;
        d/dt[vx1] = 0.8;
        d/dt[vy1] = -0.9;
    jump:
        (and (x1 < 3) (y1 < 3)) =>
                (and (ix' = true) (iy' = true) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
        (and (x1 >= 3) (y1 >= 3)) =>
                (and (ix' = false) (iy' = false) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
}
#  car1 : dec, inc
{
    mode:
        ix = false;
        iy = true;
    inv:
        vx1 > -8;
        vy1 < 8;
    flow:
        d/dt[x1] = vx1;
        d/dt[y1] = vy1;
        d/dt[vx1] = -0.8;
        d/dt[vy1] = 0.9;
    jump:
        (and (x1 < 3) (y1 < 3)) =>
                (and (ix' = true) (iy' = true) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
        (and (x1 >= 3) (y1 >= 3)) =>
                (and (ix' = false) (iy' = false) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
}
#  car1 : dec, dec
{
    mode:
        ix = false;
        iy = false;
    inv:
        vx1 > -8;
        vy1 > -8;
    flow:
        d/dt[x1] = vx1;
        d/dt[y1] = vy1;
        d/dt[vx1] = -0.8;
        d/dt[vy1] = -0.9;
    jump:
        (and (x1 >= 3) (y1 < 3)) =>
                (and (ix' = false) (iy' = true) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
        (and (x1 < 3) (y1 >= 3)) =>
                (and (ix' = true) (iy' = false) (x1' = x1) (y1' = y1) (vx1' = 0) (vy1' = 0));
}


init:
(and not(ix) not(iy) (0 <= x1) (x1 <= 1) (0 <= y1) (y1 <= 1) (-2.5 <= vx1) (vx1 <= -2) (-2.5 <= vy1) (vy1 <= -2)); 

propositions:
xg80 = x > 50;
yl50 = y < 50;
xg60 = x > 60;
xg70 = x > 70;
pix = ix;
piy = iy;

# timebound 25 
goal:
<> [4, 15] (x1 < 5); # true 
[][0, 5] x1 < 4; # false at 6
<>[3, 8] (pix -> x1 > 4);
y1 > 3 R[0, 10] ~piy;

[][0, 5] (x1 < -2 -> <> [5,15] pix); # true
(y1  >= 10) U [0, 10] (x1 >=7);
<> [2,10] (~piy -> [] [0,15] (y1 > 5)); # true
