# model description:
#
# There are two fully charged batteries, and a control
# system that switches load between these batteries.
# The goal of the control system is to achieve longer
# battery lifetime.

int b1;
int b2;

[-10, 10] g1;
[-10, 10] g2;
[-10, 10] d2;
[-10, 10] d1;

# state
# 1 : ON
# 2 : OFF
# 3 : DEAD
{
    mode:
        b1 = 1;
        b2 = 1;
    inv:
 	g1 > 0.5;
	g2 > 0.5;
    flow:
	d1(t) = (1 - 2 * t + 2 * t * t) + 1.5 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t * t) + 1.5 + d2(0);
	g1(t) = -0.5 * t + g1(0);
	g2(t) = -0.5 * t + g2(0);
    jump:
        g1 > 1 =>
          (and (b1' = 1) (b2' = 2) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
        g2 > 1 =>
          (and (b1' = 2) (b2' = 1) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
}
{
    mode:
        b1 = 1 ;
        b2 = 2 ;
    inv:
	g1 > 0.5;
	d2 > 1;
    flow:
	d1(t) = (1 - 2 * t + 2 * t * t) + 3.01 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t * t) + d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);
    jump:
        g2 > 1 =>
          (and (b1' = 2) (b2' = 1) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
        g1 > 1 =>
          (and (b1' = 1) (b2' = 1) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
        g1 <=1 =>
          (and (b1' = 3) (b2' = 1) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
}
{
    mode:
        b1 = 2;
        b2 = 1;
    inv:
	d1 > 1;
	g2 > 0.5;
    flow:
	d1(t) = (1 - 2 * t + 2 * t * t) + d1(0);
	d2(t) = (1 - 2 * t + 2 * t * t) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;
    jump:
	g1 > 1 =>
          (and (b1' = 1) (b2' = 2) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
	g2 > 1 =>
          (and (b1' = 1) (b2' = 1) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
        g2 <= 1 =>
          (and (b1' = 1) (b2' = 3) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));

}
{
    mode:
        b1 = 3;
        b2 = 1;
    inv:
	g1 < 1;
	g2 > 0.5;
    flow:
	d1(t) = d1(0);
	d2(t) = (1 - 2 * t + 2 * t * t) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;
    jump:
       g2 <= 1 =>
          (and (b1' = 3) (b2' = 3) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
}
{
    mode:
        b1 = 1;
        b2 = 3;
    inv:
	g1 > 0.5;
	g2 < 1;
    flow:
	d1(t) = (1 - 2 * t + 2 * t * t) + 3.01 + d1(0);
	d2(t) = d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);
    jump:
	g1 <= 1 =>
          (and (b1' = 3) (b2' = 3) (d1' = (d1 - 0.122 * g1)) (d2' = (d2 - 0.122 * g2)) (g1' = g1) (g2' = g2));
}
{
    mode:
        b1 = 3;
        b2 = 3;
    inv:
    flow:
        d/dt[d1] = 0 ;
        d/dt[d2] = 0 ;
        d/dt[g1] = 0 ;
        d/dt[g2] = 0 ;
    jump:
}

init:
(and (b1 = 1) (b2 = 1) (g1 = 8.5) (d1 = 0) (g2 = 7.5) (d2 = 0)) ;

propositions:
reachability = g2 > 4 ;
modeLL = (d1 > 0.3);
donegzero = d1 > 0.2 ;
dtwogzero = d2 > 0.2;
modeDD = (d1 < 0.1);

goal:
#([] [0.0, 40.0] (reachability -> <>[0.0, 20.0) (d2 > 0))) ; # false at bound 3
#[] [0, 40] g2 > 5; # false at bound 3
#((g2 < 6) R [4, 100] (d1 > 0.4)); # true
#(<> [0.0, 100.0) donegzero); # false
(<> [0, 30](g1 < 4)) R [1, 20] (g1 > 2); #true


