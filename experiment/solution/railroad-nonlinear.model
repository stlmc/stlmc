# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
bool b;
[-20, 100] tx;
[0, 90] bx;
[-50, 50] vx;
{
    mode:
        a = false;
        b = false;
    inv:
	tx > 60;
    flow:
        tx(t) = -5 * t  + tx(0);
        bx(t) = -0.01 * t * t + 0.03 *t + bx(0);
        vx(t) = 0.01 * t + vx(0) ;
    jump:
        tx < 80 =>
          (and (not a') b' (bx' = bx) (tx' = tx) (vx' = vx));
        tx < 70 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vx' = vx));
}
{
    mode:
        a = false;
        b = true;
    inv:
	tx > 40;
    flow:
        tx(t) = -5 * t  + tx(0);
        bx(t) = -0.01 * t * t + 0.03 *t + bx(0);
        vx(t) = 0.02 * t + vx(0) ;
    jump:
        tx < 80 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vx' = vx));
}
{
    mode:
        a = true;
        b = false;
    inv:
	tx > 10;
    flow:
        tx(t) = -5 * t  + tx(0);
        bx(t) = 0.01 * t * t + 0.01  * t + bx(0);
        vx(t) = 0.01 * t + vx(0) ;
    jump:
        tx < 20 =>
          (and a' b' (bx' = bx) (tx' = tx) (vx' = vx));
        tx < 0 =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)) (vx' = vx));
}
{
    mode:
        a = true;
        b = true;
    inv:
	tx > -10;
    flow:
        tx(t) = -5 * t  + tx(0);
        bx(t) = -0.02 * t * t + bx(0) + 0.001;
        vx(t) = -0.01 * t + vx(0) ;
    jump:
        (tx < 0) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)) (vx' = vx));
}
init:
(and (a = false) (b = false) (bx = 0) (tx = 90) (vx <= 0.1) (vx >= 0)) ;

propositions:
txg60 = tx < 60;
txg10 = tx > 10;
bxg80 = bx > 80;

goal:
#([] [5.0,10.0) (bx < 50)); # false at bound 3
#(tx < 50) R [10, 30] (bx < 30); # true
#([] [0, 40] (bxg80 -> (<> [0, 20) txg10))); # true
#(bx > 10) R [10, 40] ([] [0, 20] (tx > 80)); # true
#<>[0, 40] (bx < 5) U [0, 40] (<> [0, 5] (tx <= 50)); # false
#([] [20, 30] ((tx > 80) U [0, 30] (bx > 1 and bx < 3))); # false at bound 8

