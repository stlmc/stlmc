# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
bool b;
[-20, 100] tx;
[0, 90] bx;
[-50, 50] vb;
{
    mode:
        a = false;
        b = false;
    inv:
	tx > 60;
    flow:
	d/dt[tx] = -30;
	d/dt[bx] = 0;
	d/dt[vb] = 0;
    jump:
        tx < 80 =>
          (and (not a') b' (bx' = bx) (tx' = tx) (vb' = 6));
        tx < 70 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vb' = 8));
}
{
    mode:
        a = false;
        b = true;
    inv:
	tx > 20;
    flow:
	d/dt[tx] = -5;
	d/dt[bx] = vb;
	d/dt[vb] = 0.3;
    jump:
        tx < 80 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vb' = vb));
}
{
    mode:
        a = true;
        b = false;
    inv:
	tx > 10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = vb;
        d/dt[vb] = 0.5;
    jump:
        tx < 20 =>
          (and a' b' (bx' = bx) (tx' = tx) (vb' = -4));
}
{
    mode:
        a = true;
        b = true;
    inv:
	tx > -10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = vb;
        d/dt[vb] = -1;
    jump:
        (tx < 0) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)) (vb' = 0));
}
init:
(and (a = false) (b = false) (0<= bx) (bx <= 0.5) (89 <= tx) (tx <= 90) (0 <= vb) (vb <= 0.1)) ;

propositions:
txg60 = tx < 60;
txg10 = tx > 10;
bxg80 = bx > 80;
pa = a;
pb = b;

# timebound 20
goal:
<>[3, 8] tx < 60;
<>[0.0,5.0) (tx < 50 U[0, 10] bx > 5); # true
(tx > 40) U[10, 20] bx < 40; # false up to 7
[][0, 10] (<>[2, 10] bx > 50); # false at 5


