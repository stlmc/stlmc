# model description:
#
# Two rooms are connected by an open door.
# The room' temperature is controlled by
# its own heater and changes over time.
# It is also affected by each other's room
# temperature.

bool a;
[0, 50] x1;
bool b;
real startX1;
real startX2;
[0, 50] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 >= 19.5;
        (x2 >= 19.5);
    flow:
        d/dt[x1] = -0.015 * ((1 - 2 * 0.01) * startX1 + 0.01 * startX2);
        d/dt[x2] = -0.045 * ((1 - 2* 0.01) * startX2 + 0.01 * startX1);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));

}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 >= 19.5;
        (x2 <= 21);
    flow:
        d/dt[x1] = -0.015 * ((1 - 2 * 0.01) * startX1 + 0.01 * startX2);
        d/dt[x2] = 0.045 * (200 -((1 - 2 * 0.01) * startX2 + 0.01 * startX1));
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 <= 21;
        (x2 >= 19.5);
    flow:
        d/dt[x1] = 0.015 * (100 -((1 - 2 * 0.01) * startX1 + 0.01 * startX2));
        d/dt[x2] = -0.045 * ((1 - 2* 0.01) * startX2 + 0.01 * startX1);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 <= 21;
        (x2 <= 21);
    flow:
        d/dt[x1] = 0.015 * (100 -((1 - 2 * 0.01) * startX1 + 0.01 * startX2));
        d/dt[x2] = 0.045 * (200 -((1 - 2 * 0.01) * startX2 + 0.01 * startX1));
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (startX1' = x1) (startX2' = x2));
}
init:
(and (a = false) (b = false) (x1 <= 20 + 0.1) (x1 >= 20 - 0.1) (x2 <= 20 + 0.1) (x2 >= 20 - 0.1) (startX1 = x1) (startX2 = x2));

propositions:
reachability = x1 >= 21;
p = x2 > 19 ;
q = x1 <= 21;
x1T = x1 > 27 ;
x2T = x2 > 27 ;

goal:
(<> [0.0, 40.0] p);  # false
([] [10, 30] q); # true
([] [0, 10] ((~ a) U [0, 15) r)); # false
(<> (5, 30) (s R [0, 30] b)); # true

