# model description:
#
# Two rooms are connected by an open door.
# The room' temperature is controlled by
# its own heater and changes over time.
# It is also affected by each other's room
# temperature.

bool a;
[0, 50] x1;
bool b;
[0, 50] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 >= 19.5;
        (x2 >= 19.5);
    flow:
        x1(t) = -0.02 * t * t + 0.01 * t + x1(0) - 0.01 * x2(0);
        x2(t) = -0.03 * t * t - 0.015 * x1(0) + x2(0);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));

}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 >= 19.5;
        (x2 <= 21);
    flow:
        x1(t) = -0.02 * t * t + 0.01 * t + x1(0) - 0.01 * x2(0);
        x2(t) = 0.03 * t * t + 0.02 * x1(0) + x2(0);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 <= 21;
        (x2 >= 19.5);
    flow:
        x1(t) = 0.02 * t * t - 0.006 * t + x1(0) + 0.01 * x2(0);
        x2(t) = -0.03 * t * t - 0.015 * x1(0) + x2(0);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 <= 21;
        (x2 <= 21);
    flow:
        x1(t) = 0.02 * t * t - 0.006 * t + x1(0) + 0.01 * x2(0);
        x2(t) = 0.03 * t * t + 0.02 * x1(0) + x2(0);
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
init:
(and (a = false) (b = false) (x1 <= 20 + 0.1) (x1 >= 20 - 0.1) (x2 <= 20 + 3.5) (x2 >= 20 + 3));

propositions:
reachability = x1 >= 21;
p = x2 > 24 ;
q = x1 < 22;
r = x1 < 20;
s = x2 > 19;

goal:
(<> [0.0, 40.0] p);  # false
([] [0, 30] q); # true
([] [0, 10] ((~ a) U [0, 15) r)); # false
(<> (5, 30) (s R [0, 30] b)); # true

