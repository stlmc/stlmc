# model description:
#
# Two rooms are connected by an open door.
# The room' temperature is controlled by
# its own heater and changes over time.
# It is also affected by each other's room
# temperature.

# const real xxx = 1;
bool a;
[-20, 100] x1;
bool b;
[-20, 100] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 >= 19.5;
        (x2 >= 19.5);
    flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = -0.6;
    jump:
        (and (x1 > (((x1 + x2) / 2) + 0.5)) (x2 <= (((x1 + x2) / 2) + 0.5))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > (((x1 + x2) / 2) + 0.5))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));
}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 >= 19.5;
        (x2 <= 21);
    flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = 1;
    jump:
        (and (x1 > (((x1 + x2) / 2) + 0.5)) (x2 > (((x1 + x2) / 2) + 0.5))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > (((x1 + x2) / 2) + 0.5))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));

}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 <= 21;
        (x2 >= 19.5);
    flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = -0.6;
    jump:
        (and (x1 > (((x1 + x2) / 2) + 0.5)) ((x2 > ((x1 + x2) / 2) + 0.5))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > (((x1 + x2) / 2) + 0.5)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2));

}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 <= 21;
        (x2 <= 21);
    flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = 1;
    jump:
        (and (x1 > (((x1 + x2) / 2) + 0.5)) ((x2 > ((x1 + x2) / 2) + 0.5))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2));
        (and (x1 > (((x1 + x2) / 2) + 0.5)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > (((x1 + x2) / 2) + 0.5))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2));

}


init:
(and (not(a)) not(b) (x1 <= 20 + 0.1) (x1 >= 20 - 0.1) (x2 <= 20 + 3.5) (x2 >= 20 + 3));

propositions:
reachability = x1 >= 21;
p = x2 > 24 ;
q = x1 < 22;
r = x1 < 20;
s = x2 > 19;

goal:
(<> [0.0, 40.0] p);  # false
([] [10, 30] q); # true
([] [0, 10] ((~ a) U [0, 15) r)); # false
(<> (5, 30) (s R [0, 30] b)); # true

