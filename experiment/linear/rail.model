# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
bool b;
[-20, 100] tx;
[0, 90] bx;
# state
# 00: Past and Far(more than 85)
# 01: Past and Approach
# 10: Past and Near
# 11: Past and Past
{
    mode:
	a = false;
	b = false;
    inv:
	tx > 60;
    flow:
        d/dt[tx] = -30;
        d/dt[bx] = 0;
    jump:
        tx < 80 =>
          (and (not a') b' (bx' = bx) (tx' = tx));
        tx < 70 =>
          (and a' (not b') (bx' = bx) (tx' = tx));
}
{
    mode:
	a = false;
	b = true;
    inv:
	tx > 40;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 5;
    jump:
        tx < 80 =>
          (and a' (not b') (bx' = bx) (tx' = tx));
}
{
    mode:
	a = true;
	b = false;
    inv:
	tx > 10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 10;
    jump:
        tx < 20 =>
          (and a' b' (bx' = bx) (tx' = tx));
        tx < 0 =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
{
    mode:
	a = true;
	b = true;
    inv:
	tx > -10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = -5;
    jump:
        (tx < 0) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
init:
(and (a = false) (b = false) (bx = 0) (tx = 90)) ;

propositions:
txg60 = tx < 60;
txg10 = tx > 10;
bxg80 = bx > 80;

# timebound 20
goal:
([] [5.0,10.0) (bx < 50)); # false at bound 5
(tx < 50) R [10, 20] (bx < 30); # true
([] [0, 10] (bxg80 -> (<> [0, 10) txg10))); # true
(bx > 10) R [10, 15] ([] [0, 4] (tx > 80)); # true
<>[0, 5] (bx < 5) U [0, 10] (<> [2, 5] (tx <= 50)); # false at bound 8
([] [5, 8] ((tx > 80) U [0, 5] (bx > 1 and bx < 3))); # true


