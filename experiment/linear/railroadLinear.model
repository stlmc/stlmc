# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
bool b;
[-20, 100] tx;
[0, 90] bx;
# state
# 00: Past and Far(more than 85)
# 01: Past and Approach
# 10: Past and Near
# 11: Past and Past
{
    mode:
	a = false;
	b = false;
    inv:
	tx > 60;
    flow:
        d/dt[tx] = -30;
        d/dt[bx] = 0;
    jump:
        (and (70 <= tx) (tx <= 75)) =>
          (and (not a') b' (bx' = bx) (tx' = tx));
        (and (60 <= tx) (tx < 70)) =>
          (and a' (not b') (bx' = bx) (tx' = tx));
}
{
    mode:
	a = false;
	b = true;
    inv:
	tx > 40;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 5;
    jump:
        (tx < 50) =>
          (and a' (not b') (bx' = bx) (tx' = tx));
}
{
    mode:
	a = true;
	b = false;
    inv:
	tx > 10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 10;
    jump:
        (and (-5 <= tx) (tx < 5) (bx <= 80)) =>
          (and a' b' (bx' = bx) (tx' = tx));
        (and (bx > 85) (tx < -8)) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
{
    mode:
	a = true;
	b = true;
    inv:
	tx > -10;
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = -5;
    jump:
        (bx > 85) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
init:
(and (a = false) (b = false) (bx >= 0) (bx < 1) (tx >= 85) (tx <= 90)) ;

propositions:
txg60 = tx > 60;
txg10 = tx > 10;
bxg80 = bx > 80;

goal:
([] [0.0,50.0) (tx > 0)); # true
(<> [0, 20] (tx < -5)); # false
([] [0, 40] (bxg80 -> (<> [0, 20) txg10))); # true
(bx < 10) U [10, 40] (<> [0, 20] (tx < 40)); # false

