real w1;
real w2;
[-3000, 3000] x1;
[-3000, 3000] y1;
[-100, 100] dx1;
[-100, 100] dy1;
[-3000, 3000] x2;
[-3000, 3000] y2;
[-100, 100] dx2;
[-100, 100] dy2;
const real v1 = 30;
const real v2 = 20;
const real minr1 = 0.67;
const real minr2 = 0.67;
const real p = 3;
# free mode
{
    mode:
        w1 = 0;
	w2 = 0;
    inv:
	(x1 - x2) + (y1 - y2) > (2 * minr1 + 2 * minr2 + p);
    flow:
        d/dt[x1] = v1 * dx1;
        d/dt[y1] = v1 * dy1;
        d/dt[x2] = v2 * dx2;
	d/dt[y2] = v2 * dy2;
	d/dt[dx1] = -w1 * dy1;
	d/dt[dy1] = w1 * dx1;
	d/dt[dx2] = -w2 * dy2;
	d/dt[dy2] = w2 * dx2;
    jump:
	(and ((x1 - x2) < (2 * minr1 + 2 * minr2 + p)) ((x1 - x2) > -(2 * minr1 + 2 * minr2 + p)) ((y1 - y2) < (2 * minr1 + 2 * minr2 + p)) ((y1 - y2) > -(2 * minr1 + 2 * minr2 + p))) =>
               (and (or (w1' = -45) (w1' = 45)) (or (w2' = 30) (w2' = -30)) (x1' = x1) (y1' = y1) (dx1' = dx1) (dy1' = dy1) (x2' = x2) (y2' = y2) (dx2' = dx2) (dy2' = dy2));
}
# rotation mode
{
    mode:
	(or (w1 = -45) (w1 = 45));
	(or (w2 = -30) (w2 = 30)); 
    inv:
	(x1 - x2) + (y1 - y2) <= (2 * minr1 + 2 * minr2 + p);
    flow:
        d/dt[x1] = v1 * dx1;
        d/dt[y1] = v1 * dy1;
        d/dt[x2] = v2 * dx2;
        d/dt[y2] = v2 * dy2;
        d/dt[dx1] = -w1 * dy1;
        d/dt[dy1] = w1 * dx1;
        d/dt[dx2] = -w2 * dy2;
        d/dt[dy2] = w2 * dx2;
    jump:
        (and ((x1 - x2) > (2 * minr1 + 2 * minr2 + p)) ((x1 - x2) < -(2 * minr1 + 2 * minr2 + p)) ((y1 - y2) > (2 * minr1 + 2 * minr2 + p)) ((y1 - y2) < -(2 * minr1 + 2 * minr2 + p))) =>
               (and (w1' = 0) (w2' = 0) (x1' = x1) (y1' = y1) (dx1' = dx1) (dy1' = dy1) (x2' = x2) (y2' = y2) (dx2' = dx2) (dy2' = dy2));
}

init:
(and (w1 = 0) (w2 = 0) (x1 >= -200) (x1 <= -150) (y1 >= -200) (y1 <= -150) (x2 <= 200) (x2 >= 150) (y2 >= 150) (y2 <= 200) (dx1 = 1) (dy1 = 1) (dx2 = -1) (dy2 = -1));


propositions:
xl40 = x1 < 40;

# timebound :50
goal:
[] [10, 30] (((x1 - x2) + (y1 - y2)) >= 100);
(<> [0, 20] ((dx1 - dx2) < 20 U [0, 10] (and xl40 (x1 > -40) (y1 < 40) (y1 < -40)))); # true

