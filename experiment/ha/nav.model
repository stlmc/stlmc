bool dx;
bool dy;
[-20, 20] vx;
[-20, 20] vy;
[0, 100] x;
[0, 100] y;
# zone 1
#   x: decrease, y: decrease
{
    mode:
        dx = false;
        dy = false;
    inv:
        y >= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.02 * vx + 0.02 * vy - 0.45;
        d/dt[vy] = 0.02 * vx + 0.02 * vy - 0.45;
    jump:
        (and (x <= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = false) (x' = x) (y' = y) (vx' = 3) (vy' = -3));
}
# zone 2
#   x: decrease, y: increase
{
    mode:
        dx = false;
        dy = true;
    inv:
        x >= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.02 * vx - 0.02 * vy - 0.45; 
        d/dt[vy] = -0.02 * vx + 0.02 * vy + 0.45;
    jump:
        (and (x <= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = false) (x' = x) (y' = y) (vx' = -3) (vy' = -3));
}
# zone 3
#   x: increase, y: decrease
{
    mode:
	dx = true;
	dy = false;
    inv:
	x < 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
       d/dt[vx] = 0.02 * vx - 0.02 * vy + 0.45; 
        d/dt[vy] = -0.02 * vx - 0.02 * vy - 0.45;
    jump:
        (and (x >= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = true) (x' = x) (y' = y) (vx' = 3) (vy' = 3));
}
# zone 4
#   x: increase, y: increase
{
    mode:
        dx = true;
        dy = true;
    inv:
        y <= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
	d/dt[vx] = 0.02 * vx + 0.02 * vy + 0.45;
	d/dt[vy] = 0.02 * vx + 0.02 * vy + 0.45;
    jump:
        (and (x >= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = true) (x' = x) (y' = y) (vx' = -3) (vy' = 3));
}


init:
(and (not(dx)) not(dy) (29 <= x) (x <= 31) (79 <= y) (y <= 81) (-3 <= vx) (vx <= -2.5) (-3 <= vy) (vy <= -2.5));

propositions:
xg80 = x > 60;
yl50 = y < 50;
xg60 = x > 60;
xg70 = x > 70;

# timebound 20
goal:
<>[5, 10] (y >= 30);
(<> [1, 4) y >= 50) R[3, 10] x < 70; 
([][3, 5] (<>[2, 5] y > 40)); 
(<>[2, 5] (x > 40 U[0, 10] y > 40)); 


