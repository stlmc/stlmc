#define g           9.80555
#define pi          3.1415926535897931

#define vT          92.827721
#define yBTA        -0.099593
#define lBTA        -1.700982
#define lP          -1.184647
#define lR           0.223908
#define nBTA         0.407420
#define nP          -0.056276
#define nR          -0.188010
#define yRDR         0.740361
#define lAIL         0.531304
#define lRDR         0.049766
#define nAIL         0.005685
#define nRDR        -0.106592
# timebound : 1

bool a;
bool b;

[-3.14159,3.14159]    beta;
[-3.14159,3.14159]    p;
[-3.14159,3.14159]    r;
[-3.14159,3.14159]    phi;
[-3.14159,3.14159]    psi;

[-3.14159,3.14159]    xAIL;
[-3.14159,3.14159]    xRDR;
[-3.14159,3.14159]    gAIL;
[-3.14159,3.14159]    gRDR;

[0,0.5]  time;

{
 	mode:
		a = false;
		b = false;

	inv: 
		(time >= 0);
		(time <= 0.5);
  	flow: 
        	d/dt[beta]    = -0.099593 * beta - r + (9.80555 / 92.8277) * phi + 0.740361 * xRDR;
		d/dt[p]       = -1.700982 * beta + -1.184647 * p + 0.223908 * r + 0.531304 * xAIL + 0.049766 * xRDR;
		d/dt[r]       = 0.407420 * beta + -0.056276 * p + -0.188010 * r + 0.005685 * xAIL + -0.106592 * xRDR;
		d/dt[phi]     = p;
		d/dt[psi]     = (9.80555 / 92.8277) * phi;
        	d/dt[xAIL]    = 0.25;
        	d/dt[xRDR]    = 0.5;
		d/dt[gAIL]    = 0;
		d/dt[gRDR]    = 0;
        	d/dt[time]     = 1;
 	jump: 
        	(and (time = 0.5) (gRDR >= xRDR) (gAIL >= xAIL)) => 
        		(and (not a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
             		   (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

        	(and (time = 0.5) (gRDR < xRDR) (gAIL >= xAIL)) => 
        		(and (not a') (b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                		(xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

        	(and (time = 0.5) (gRDR >= xRDR) (gAIL < xAIL)) => 
        		(and (a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                		(xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

     		(and (time = 0.5) (gRDR < xRDR) (gAIL < xAIL)) => 
        		(and (a') (b') (beta' = beta) (p' =  p) (r' = r) (phi' = phi)  (psi' = psi)
               		   (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));
}
{
	mode :
		a = false;
		b = true;
	
  	inv: 
		(time >= 0);
		(time <= 0.5);
 	 flow: 
       		 d/dt[beta]    = -0.099593 * beta - r + (9.80555 / 92.8277) * phi + 0.740361 * xRDR;
       		 d/dt[p]       = -1.700982 * beta + -1.184647 * p + 0.223908 * r + 0.531304 * xAIL + 0.049766 * xRDR;
       		 d/dt[r]       = 0.407420 * beta + -0.056276 * p + -0.188010 * r + 0.005685 * xAIL + -0.106592 * xRDR;
       		 d/dt[phi]     = p;
       		 d/dt[psi]     = (9.80555 / 92.8277) * phi;
       		 d/dt[xAIL]    = 0.25;
       		 d/dt[xRDR]    = -0.5;
       		 d/dt[gAIL]    = 0;
       		 d/dt[gRDR]    = 0;
       		 d/dt[time]     = 1;
 	 jump: 
                (and (time = 0.5) (gRDR >= xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR >= xRDR) (gAIL < xAIL)) =>
                        (and (a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL < xAIL)) =>
                        (and (a') (b') (beta' = beta) (p' =  p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));
}
{
	mode:
		a = true;
		b = false;

	inv: 
		(time >= 0);
		(time <= 0.5);
	flow: 
       		 d/dt[beta]    = -0.099593 * beta - r + (9.80555 / 92.8277) * phi + 0.740361 * xRDR;
       		 d/dt[p]       = -1.700982 * beta + -1.184647 * p + 0.223908 * r + 0.531304 * xAIL + 0.049766 * xRDR;
       		 d/dt[r]       = 0.407420 * beta + -0.056276 * p + -0.188010 * r + 0.005685 * xAIL + -0.106592 * xRDR;
       		 d/dt[phi]     = p;
       		 d/dt[psi]     = (9.80555 / 92.8277) * phi;
       		 d/dt[xAIL]    = -0.25;
       		 d/dt[xRDR]    = 0.5;
       		 d/dt[gAIL]    = 0;
       		 d/dt[gRDR]    = 0;
       		 d/dt[time]     = 1;
	jump: 
                (and (time = 0.5) (gRDR >= xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR >= xRDR) (gAIL < xAIL)) =>
                        (and (a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL < xAIL)) =>
                        (and (a') (b') (beta' = beta) (p' =  p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));
}
{
	mode:
		a = true;
		b = true;

	inv: 
		(time >= 0);
		(time <= 0.5);
	flow: 
       		 d/dt[beta]    = -0.099593 * beta - r + (9.80555 / 92.8277) * phi + 0.740361 * xRDR;
       		 d/dt[p]       = -1.700982 * beta + -1.184647 * p + 0.223908 * r + 0.531304 * xAIL + 0.049766 * xRDR;
       		 d/dt[r]       = 0.407420 * beta + -0.056276 * p + -0.188010 * r + 0.005685 * xAIL + -0.106592 * xRDR;
       		 d/dt[phi]     = p;
       		 d/dt[psi]     = (9.80555 / 92.8277) * phi;
       		 d/dt[xAIL]    = -0.25;
       		 d/dt[xRDR]    = -0.5;
       		 d/dt[gAIL]    = 0;
       		 d/dt[gRDR]    = 0;
       		 d/dt[time]     = 1;
	jump: 
                (and (time = 0.5) (gRDR >= xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL >= xAIL)) =>
                        (and (not a') (b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR >= xRDR) (gAIL < xAIL)) =>
                        (and (a') (not b') (beta' = beta) (p' = p) (r' = r) (phi' = phi)  (psi' = psi)
                                (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));

                (and (time = 0.5) (gRDR < xRDR) (gAIL < xAIL)) =>
                        (and (a') (b') (beta' = beta) (p' =  p) (r' = r) (phi' = phi)  (psi' = psi)
                           (xAIL' = xAIL) (xRDR' = xRDR) (gAIL' = gAIL) (gRDR'= gRDR) (time' = 0));
}


init: (and (a = false) (b = false) (beta = 0) (p = 0)    (r = 0)    (phi = 0)  (psi = 0)
	      (xAIL = 0) (xRDR = 0) (gAIL = 0) (gRDR = 0) (time = 0));

propositions:
p1 = beta > 0.2;
p2 = beta < -0.2;

goal: 
#reach (or p1 p2);
(<> [0, 50] (beta > 0.3));
((phi > 0) R [10, 20] (p < 0));
(<> [10, 40] ((beta < -0.2) -> <> [5, 10] (p < 0)));
([] [5, 35] ((p > 0) U [2, 8] (beta < 1)));
  



