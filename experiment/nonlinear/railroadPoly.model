# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
bool b;
[-20, 100] tx;
[-10, 10] vacc;
[0, 90] bx;
[-50, 50] vx;
{
    mode:
	a = false;
	b = false;
    inv:
	tx > 60;
    flow:
        d/dt[tx] = -5 ;
        d/dt[bx] = vx ;
        d/dt[vx] = vacc ;
        d/dt[vacc] = 0;
    jump:
        tx < 80 =>
          (and (not a') b' (bx' = bx) (tx' = tx) (vacc' = vacc) (vx' = vx));
        tx < 70 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vacc' = vacc) (vx' = vx));
}
{
    mode:
	a = false;
	b = true;
    inv:
	tx > 40;
    flow:
        d/dt[tx] = -5 ;
        d/dt[bx] = vx ;
        d/dt[vx] = vacc ;
        d/dt[vacc] = 0;
    jump:
        tx < 80 =>
          (and a' (not b') (bx' = bx) (tx' = tx) (vacc' = vacc) (vx' = vx));
}
{
    mode:
	a = true;
	b = false;
    inv:
	tx > 10;
    flow:
        d/dt[tx] = -5 ;
        d/dt[bx] = vx ;
        d/dt[vx] = vacc ;
        d/dt[vacc] = 0;
    jump:
        tx < 20 =>
          (and a' b' (bx' = bx) (tx' = tx) (vacc' = vacc) (vx' = vx));
        tx < 0 =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)) (vacc' = vacc) (vx' = vx));
}
{
    mode:
	a = true;
	b = true;
    inv:
	tx > -10;
    flow:
        d/dt[tx] = -5 ;
        d/dt[bx] = vx ;
        d/dt[vx] = vacc ;
        d/dt[vacc] = 0;
    jump:
        (tx < 0) =>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)) (vacc' = vacc) (vx' = vx));
}
init:
(and (a = false) (b = false) (bx = 0) (tx = 90) (vacc > 0) (vacc < 0.1) (vx <= 0.1) (vx >= 0)) ;

propositions:
txg60 = tx < 60;
txg10 = tx > 10;
bxg80 = bx > 80;

goal:
([] [0.0,50.0) (tx > 0)); # true
(<> [0, 20] (tx < -5)); # false
([] [0, 40] (bxg80 -> (<> [0, 20) txg10))); # true
(bx < 10) U [10, 40] (<> [0, 20] (tx < 40)); # false
