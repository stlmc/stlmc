# Hill Climbing Car
# 

const real variance = 0.5;

bool isfail;
int a;
real slope0;
real slope1;

[0, 1000000] v;
[0, 5] tl;


# state
# 1: flat
# 2: uphill
# 3: downhill
# 4: fall

{
    mode:
        isfail = false;
        slope0 > 0;
    inv:
        tl > 0;
        a <= -19 * slope0 + 30;
    flow:
        d/dt[v] = 10;
        d/dt[tl] = -1;
    jump:
        (tl <= 0) =>
         (and (isfail' = true) (a' = 50) (v' = v) (tl' = 5) (slope0' = slope0) (slope1' = slope1));

        (a > -19 * slope0 + 30) =>
         (and (isfail' = true) (a' = a) (v' = v) (tl' = tl) (slope0' = slope0) (slope1' = slope1));
}

{
   mode:
       isfail = true;
   inv:
       
   flow:
        d/dt[v] = 2;
        d/dt[tl] = 0;
   jump:
}

init:
(and (isfail = false) (v = 0) (a = 10) (tl = 5) (slope0 = 0.1) (slope1 = 0.1));

propositions:

goal:
reach isfail;
#([] [0, 1000] ~isfail);
#([] [0, 10] (<> [1, 4] (a > 0)));
# ([] [0, 10] (or (and (slope0 > 0) (a <= -19 * slope0 + 30)) (and (slope0 < 0) (a <= 19 * slope0 + 30)) (slope0 = 0)));
# ([] [0, 100] (slope0 >= 0));
# (<> [0, 15] (tl = 0));
