# Hill Climbing Car
# 

const real variance = 0.5;

bool isfail;
int a;
real slope0;
real slope1;

[0, 1000000] v;
[0, 100] dl;
[0, 5] tl;


# state
# 1: flat
# 2: uphill
# 3: downhill
# 4: fall

{
    mode:
        isfail = false;
        slope0 = 0;
    inv:
        tl > 0;
        dl > 0;
    flow:
        v(t) = a * t + v(0);
        dl(t) = -v * (1 - slope0 * slope0 / 2) * t + dl(0);
        tl(t) = -t + tl(0);
    jump:
        (tl <= 0) =>
         (and (isfail' = isfail) (a' = 50) (v' = v) (dl' = dl) (tl' = 5) (slope0' = slope0) (slope1' = slope1));
        (dl <= 0) =>
         (and (isfail' = isfail) (a' = a) (v' = v) (dl' = 100) (tl' = tl) (slope0' = slope1) (and (slope1' < slope1 + variance) (slope1' > slope1 - variance) (slope1' < 1.05) (slope1' > -1.05)));
}

{
    mode:
        isfail = false;
        slope0 > 0;
    inv:
        tl > 0;
        dl > 0;
        a <= -19 * slope0 + 30;
    flow:
        v(t) = a * t + v(0);
        dl(t) = -v * (1 - slope0 * slope0 / 2) * t + dl(0);
        tl(t) = -t + tl(0);
    jump:
        (tl <= 0) =>
         (and (isfail' = isfail) (a' = 50) (v' = v) (dl' = dl) (tl' = 5) (slope0' = slope0) (slope1' = slope1));
        (dl <= 0) =>
         (and (isfail' = isfail) (a' = a) (v' = v) (dl' = 100) (tl' = tl) (slope0' = slope1) (and (slope1' < slope1 + variance) (slope1' > slope1 - variance) (slope1' < 1.05) (slope1' > -1.05)));

        (a > -19 * slope0 + 30) =>
         (and (isfail' = true) (a' = a) (v' = v) (dl' = dl) (tl' = tl) (slope0' = slope0) (slope1' = slope1));
}

{
    mode:
        isfail = false;
        slope0 < 0;
    inv:
        tl > 0;
        dl > 0;
        a <= 19 * slope0 + 30;
    flow:
        v(t) = a * t + v(0);
        dl(t) = -v * (1 - slope0 * slope0 / 2) * t + dl(0);
        tl(t) = -t + tl(0);
    jump:
        (tl <= 0) =>
         (and (isfail' = isfail) (a' = 50) (v' = v) (dl' = dl) (tl' = 5) (slope0' = slope0) (slope1' = slope1));
        (dl <= 0) =>
         (and (isfail' = isfail) (a' = a) (v' = v) (dl' = 100) (tl' = tl) (slope0' = slope1) (and (slope1' < slope1 + variance) (slope1' > slope1 - variance) (slope1' < 1.05) (slope1' > -1.05)));

        (a > 19 * slope0 + 30) =>
         (and (isfail' = true) (a' = a) (v' = v) (dl' = dl) (tl' = tl) (slope0' = slope0) (slope1' = slope1));
}
{
   mode:
       isfail = true;
   inv:
       
   flow:
       v(t) = a * t + v(0);
       dl(t) = -v * (1 - slope0 * slope0 / 2) * t + dl(0);
       tl(t) = -t + tl(0);
   jump:
       (tl = 0) =>
        (and (isfail' = isfail) (a' = 20) (v' = v) (dl' = dl) (tl' = 5) (slope0' = slope0) (slope1' = slope1));
       (dl = 0) =>
        (and (isfail' = isfail) (a' = a) (v' = v) (dl' = 100) (tl' = tl) (slope0' = slope1) (and (slope1' < slope1 + variance) (slope1' > slope1 - variance) (slope1' < 1.05) (slope1' > -1.05)));
}

init:
(and (isfail = false) (v = 0) (a = 10) (dl = 100) (tl = 5) (slope0 = 0.1) (slope1 = 0.1));

propositions:

goal:
([] [0, 100] ~isfail);
# ([] [0, 10] (or (and (slope0 > 0) (a <= -19 * slope0 + 30)) (and (slope0 < 0) (a <= 19 * slope0 + 30)) (slope0 = 0)));
# ([] [0, 100] (slope0 >= 0));
# (<> [0, 15] (tl = 0));
