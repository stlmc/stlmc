# logging: ode
bool dx;
bool dy;
[-10, 10] vx;
[-10, 10] vy;
[0, 100] x;
[0, 100] y;
# zone 1
#   x: decrease, y: decrease
{
    mode:
        dx = false;
        dy = false;
    inv:
        y >= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.02 * vx + 0.02 * vy - 0.45;
        d/dt[vy] = 0.02 * vx + 0.02 * vy - 0.45;
    jump:
        (and (x <= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = false) (x' = x) (y' = y) (vx' = 3) (vy' = -3));
}
# zone 2
#   x: decrease, y: increase
{
    mode:
        dx = false;
        dy = true;
    inv:
        x >= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.02 * vx - 0.02 * vy - 0.45; 
        d/dt[vy] = -0.02 * vx + 0.02 * vy + 0.45;
    jump:
        (and (x <= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = false) (x' = x) (y' = y) (vx' = -3) (vy' = -3));
}
# zone 3
#   x: increase, y: decrease
{
    mode:
	dx = true;
	dy = false;
    inv:
	x < 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
       d/dt[vx] = 0.02 * vx - 0.02 * vy + 0.45; 
        d/dt[vy] = -0.02 * vx - 0.02 * vy - 0.45;
    jump:
        (and (x >= 50) (y <= 50)) =>
          (and (dx' = true) (dy' = true) (x' = x) (y' = y) (vx' = 3) (vy' = 3));
}
# zone 4
#   x: increase, y: increase
{
    mode:
        dx = true;
        dy = true;
    inv:
        y <= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
	d/dt[vx] = 0.02 * vx + 0.02 * vy + 0.45;
	d/dt[vy] = 0.02 * vx + 0.02 * vy + 0.45;
    jump:
        (and (x >= 50) (y >= 50)) =>
          (and (dx'= false) (dy' = true) (x' = x) (y' = y) (vx' = -3) (vy' = 3));
}


init:
(and (not(dx)) not(dy) (29 <= x) (x <= 31) (79 <= y) (y <= 81) (-3 <= vx) (vx <= -2.5) (-3 <= vy) (vy <= -2.5));

proposition:

# bound: 5, timebound: 10
goal:
[f1]: <>[2, 4] ((y >= 30) -> [][1, 5] y >= 60); # threshold: 3, time-horizon: 3 
[f2]: <> [2, 4] ([][3, 6] (y <= 40)); # threshold: 2, time-horizon: 2.5
[f3]: <>[1, 5](vx >= 2 R[0, inf) x <= 80); # threshold: 1, time-horizon: 4

