# logging: poly
bool ix;        bool iy;
[-40, 40] rx;   [-40, 40] ry;
[-30, 30] vx;   [-30, 30] vy;
#  acc, acc
{ mode: ix = true; iy = true;
  inv:  rx < 20; ry < 20;
        vx < 8; vy < 8;
  flow: d/dt[rx] = vx;
        d/dt[ry] = vy;
        d/dt[vx] = 1.2;
        d/dt[vy] = 1.4;
  jump: (and (rx >= 3) (ry < 3)) =>
        (and (ix' = false) (iy' = true)
	           (rx' = rx) (ry' = ry)
	           (vx' = 0) (vy' = 0));
        (and (rx < 3) (ry >= 3)) =>
        (and (ix' = true) (iy' = false)
	           (rx' = rx) (ry' = ry)
	           (vx' = 0) (vy' = 0));
}
#  car1 : acc, dec
{ mode: ix = true; iy = false;
  inv:  rx < 20;  ry > -20;
        vx < 8;  vy > -8;
  flow: d/dt[rx] = vx;
        d/dt[ry] = vy;
        d/dt[vx] = 1.2;
        d/dt[vy] = -1.4;
  jump: (and (rx >= 3) (ry >= 3)) =>
        (and (ix' = false) (iy' = false)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
        (and (rx >= 3) (ry < 3)) =>
        (and (ix' = false) (iy' = true)
	           (rx' = rx) (ry' = ry)
	           (vx' = 0) (vy' = 0));
}
#  car1 : dec, acc
{ mode: ix = false; iy = true;
  inv:  rx > -20; ry < 20;
        vx > -8; vy < 8;
  flow: d/dt[rx] = vx;
        d/dt[ry] = vy;
        d/dt[vx] = -1.2;
        d/dt[vy] = 1.4;
  jump: (and (rx < 3) (ry < 3)) =>
        (and (ix' = true) (iy' = true)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
        (and (rx >= 3) (ry >= 3)) =>
        (and (ix' = false) (iy' = false)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
        (and (rx < 3) (ry >= 3)) =>
        (and (ix' = true) (iy' = false)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
}
#  car1 : dec, dec
{ mode: ix = false; iy = false;
  inv:  rx > -20; ry > -20;
        vx > -8; vy > -8;
  flow: d/dt[rx] = vx;
        d/dt[ry] = vy;
        d/dt[vx] = -1.2;
        d/dt[vy] = -1.4;
  jump: (and (rx < 3) (ry < 3)) =>
        (and (ix' = true) (iy' = true)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
        (and (rx >= 3) (ry < 3)) =>
        (and (ix' = false) (iy' = true)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
        (and (rx < 3) (ry >= 3)) =>
        (and (ix' = true) (iy' = false)
             (rx' = rx) (ry' = ry)
             (vx' = 0) (vy' = 0));
}
init: not(ix); 0 <= rx; rx <= 1;
      not(iy); 0 <= ry; ry <= 1;
      -2.5 <= vx; vx <= -2;
      -2.5 <= vy; vy <= -2;

proposition:
  [pix]: ix;

# bound: 10, timebound: 15, solver: yices
goal:
  [f1]: [][0,4] (vx < -2 -> <>[2,5] rx <= -2); # threshold: 0.5
  [f2]: (<>[0, 4] ry > 3) U [0, 5] (vy > 1.5); # threshold: 2.0
  [f3]: <>[0,3] (rx <= 5 U[0, 5] ~ pix); # threshold: 0.1
