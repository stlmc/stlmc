# logging: ode
real loc;
[-100, 100] x;  [-100, 100] y;  [-100, 100] z;
[-100, 100] x1; [-100, 100] x2; [-100, 100] x3;
{ mode: loc = 1;
  inv:  x >= 0;
        y + 2 * x >= 0;
  flow: d/dt[x] = -0.2 * x + 1.4;
        d/dt[y] = -0.1 * y - 0.7;
        d/dt[x1] = 3 * x - 3 * x1;
        d/dt[x2] = 3 * x1 - 3 * x2;
        d/dt[x3] = 3 * x2 - 3 * x3;
        d/dt[z] = 3 * x3 - 3 * z;
  jump: (and (x >= 0) (y + 2 * x <= 0)) =>
        (and (loc' = 2) (x' = x) (y' = y)
             (x1' = x1) (x2' = x2) (x3' = x3)
             (z' = z));
}
{ mode: loc = 2;
  inv:  x >= 0;
        y + 2 * x <= 0;
  flow: d/dt[x] = -0.2 * x - 1.4;
        d/dt[y] = -0.1 * y + 0.7;
        d/dt[x1] = 3 * x - 3 * x1;
        d/dt[x2] = 3 * x1 - 3 * x2;
        d/dt[x3] = 3 * x2 - 3 * x3;
        d/dt[z] = 3 * x3 - 3 * z;
  jump: (and (x <= 0) (y + 2 * x <= 0)) =>
        (and (loc' = 3) (x' = x) (y' = y)
             (x1' = x1) (x2' = x2) (x3' = x3)
             (z' = z));
}
{ mode: loc = 3;
  inv:  x <= 0;
        y + 2 * x <= 0;
  flow: d/dt[x] = -0.2 * x - 1.4;
        d/dt[y] = -0.1 * y + 0.7;
        d/dt[x1] = 3 * x - 3 * x1;
        d/dt[x2] = 3 * x1 - 3 * x2;
        d/dt[x3] = 3 * x2 - 3 * x3;
        d/dt[z] = 3 * x3 - 3 * z;
  jump: (and (x <= 0) (y + 2 * x >= 0)) =>
        (and (loc' = 4) (x' = x) (y' = y)
             (x1' = x1) (x2' = x2) (x3' = x3)
             (z' = z));
}
{ mode: loc = 4;
  inv:  x <= 0;
        y + 2 * x >= 0;
  flow: d/dt[x] = -0.2 * x + 1.4;
        d/dt[y] = -0.1 * y - 0.7;
        d/dt[x1] = 3 * x - 3 * x1;
        d/dt[x2] = 3 * x1 - 3 * x2;
        d/dt[x3] = 3 * x2 - 3 * x3;
        d/dt[z] = 3 * x3 - 3 * z;
  jump: (and (x >= 0) (y + 2 * x >= 0)) =>
        (and (loc' = 1) (x' = x) (y' = y)
             (x1' = x1) (x2' = x2) (x3' = x3)
             (z' = z));
}
init: loc = 1; 0.2 <= x; x <= 0.3;
              -0.1 <= y; y <= 0.1;
      x1 = 0; x2 = 0; x3 = 0; z = 0;


proposition:

# bound: 5, timebound: 8, solver: dreal
goal:
  [f1]: <>[0,3]((x3 >= 1) R[0, inf) (y <= 10)); # threshold: 0.1, time-horizon: 2
  [f2]: <>[2, 5] ([][0, 3] (x2 < 4));		# threshold: 1.0, time-horizon: 2
  [f3]: ([][1, 3] (x <= 2)) R[2, 5] (x3 > 2); 	# threshold: 0.1, time-horizon: 2