# logging: ode
real m;
[-100, 100] x;
[-100, 100] y;
[-30, 30] vx;
[-30, 30] vy;

# n = 0.5, m_c = 10, 
{
    mode:
        m = 1;
    inv:
	(x >= 40); 
	(y >= 40);
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.07 * x + 0.1 * vy - 4;
        d/dt[vy] = - 0.1 * vx - 2; 
    jump:
        (or (x <= 50) (y <= 50)) =>
           (and (m' = 2) 
                (x' = x) (y' = y) (vx' = vx) (vy' = vy));
}
{
    mode:
        m = 2;
    inv:
	vx >= -5;
	vy >= -5;
	x <= 50;
	y <= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.07 * x + 0.1 * vy - 3;
        d/dt[vy] = - 0.1 * vx - 1;
    jump:
	(or (vx <= -4) (vy <= -4)) => 
           (and (m' = 3) 
                (x' = x) (y' = y) (vx' = vx) (vy' = vy));
}
{
    mode:
	m = 3;
    inv:
        x <= 50;
        y <= 50;
    flow:
        d/dt[x] = vx;
        d/dt[y] = vy;
        d/dt[vx] = 0.07 * x + 0.1 * vy + 4; 
        d/dt[vy] = - 0.1 * vx + 6;
    jump:
        (and (x > 45) (y > 45))  =>
           (and (m' = 1)
                (x' = x) (y' = y) (vx' = vx) (vy' = vy));
        (or (vx >= 3) (vy >= 3)) =>
           (and (m' = 2)
                (x' = x) (y' = y) (vx' = vx) (vy' = vy)); 
}

init:
(and (m = 1) (x <= 70) (x >= 60) (y <= 70) (y >= 60) (vx <= 0) (vx >= -1) (vy <= 0) (vy >= -1));

proposition:

# bound: 5, timebound: 5
goal:
[f1]: [][0, 2] ((vx + vy <= -2) -> <>[0, 3] (vx + vy > 10)); # threshold: 1.5, time-horizon : 2
[f2]: <>[2, 3] ([][1,2] (x <= 40)); # threshold: 0.1, time-horizon: 1.5
[f3]: [][0, 2] ((x + y >= 100) -> <>[1, 3] (x + y <= 55)); # threshold: 1, time-horizon: 2


