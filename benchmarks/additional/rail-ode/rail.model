# logging: ode
# model description:
#
# There exist a train and a crossing barrier on a
# circular track. The train is moving around the track.
# The barrier closes or opens depending on the distance
# to the train. The goal of the barrier is to prevent others
# from entering the track when the train passes by.

bool a;
[0, 90] b;
[-20, 20] vb;
#open
{
    mode:
	a = true;
    inv:
	vb <= 20;
	vb >= 0;
	b >= 0;
    flow:
        d/dt[b] = vb ;
        d/dt[vb] = 1.2;
    jump:
        b > 70 =>
          (and (a' = false) (b' = b) (vb' = -1.2 * vb));
}
#close
{
    mode:
	a = false;
    inv:
	vb <= 0;
	vb >= -20 ;
	b >= 0;
    flow:
        d/dt[b] = vb ;
        d/dt[vb] = -1 + 0.2 * vb ** 2 ;
    jump:
        b < 20 =>
          (and a' (b' = b) (vb' = -0.8 * vb));
}


init:
(and (a = true) (0<= b) (b <= 1) (2 <= vb) (vb <= 4)); 

proposition:

# bound: 5, timebound: 8
goal:
[f1]: [][1, 3](vb > 6 -> <>[2, 4] b > 60); # threshold: 2, time-horizon: 2
[f2]: (<>[1, 3] b > 3) U[1, 4] vb <= 1;  # threshold: 0.5, time-horizon: 2
[f3]: <>[0, 4] ([] [2, 4] b >= 80); # threshold: 1, time-horizon: 3

