#define gT 20
#define K1 0.015
#define K2 0.045
#define h1 100
#define h2 200
#define c  0.01

[-20, 100] x1;
[-20, 100] x2;

[0, 1] time;

{mode 1;

  invt: (x1 > 10);
        (x2 > 10);
  flow:
        d/dt[x1] = -K1 * ((1 - 2 * c) * x1 + c * x2);
        d/dt[x2] = -K2 * ((1 - 2 * c) * x2 + c * x1);
  jump:
        (and (x1 > gT) (x2 > gT)) ==> 
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > gT) (x2 <= gT)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 > gT)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 <= gT)) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 2;

  invt: (x1 > 10);
        (x2 < 30);
  flow:
        d/dt[x1] = -K1 * ((1 - 2 * c) * x1 + c * x2);
        d/dt[x2] = K2 * (h2 - ((1 - 2 * c) * x2 + c * x1));
  jump:
        (and (x1 > gT) (x2 > gT)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > gT) (x2 <= gT)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 > gT)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 <= gT)) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 3;

  invt: (x1 < 30);
        (x2 > 10);
  flow:
        d/dt[x1] = K1 * (h1 - ((1 - 2 * c) * x1 + c * x2));
        d/dt[x2] = -K2 * ((1 - 2 * c) * x2 + c * x1);
  jump:
        (and (x1 > gT) (x2 > gT)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > gT) (x2 <= gT)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 > gT)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 <= gT)) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 4;

  invt: (x1 < 30);
        (x2 < 30);
  flow:
        d/dt[x1] = K1 * (h1 - ((1 - 2 * c) * x1 + c * x2));
        d/dt[x2] = K2 * (h2 - ((1 - 2 * c) * x2 + c * x1));
  jump:
        (and (x1 > gT) (x2 > gT)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > gT) (x2 <= gT)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 > gT)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= gT) (x2 <= gT)) ==>
          @4 (and (x1' = x1) (x2' = x2));
}


init:
@1  (and (x1 >= gT - 1) (x1 <= gT + 1) (x2 >= gT - 1) (x2 <= gT + 1));

goal:
@1  (and (or (x1 < gT - 1) (x1 > gT + 1)) (or (x2 < gT - 1) (x2 > gT + 1)));

