#define gT 20
#define x1Off -0.4
#define x1On  0.7
#define x2Off -0.6
#define x2On  1

[-20, 100] x1;
[-20, 100] x2;

[0, 30000] time;

{mode 1;

  invt: (x1 > 0);
        (x2 > 0);
  flow:
        d/dt[x1] = x1Off; 
        d/dt[x2] = x2Off;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==> 
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 2;

  invt: (x1 > 0);
        (x2 < 50);
  flow:
        d/dt[x1] = x1Off;
        d/dt[x2] = x2On;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2)); 
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 3;

  invt: (x1 < 50);
        (x2 > 0);
  flow:
        d/dt[x1] = x1On; 
        d/dt[x2] = x2Off;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2)); 
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 4;

  invt: (x1 < 50);
        (x2 < 50);
  flow:
        d/dt[x1] = x1On;
        d/dt[x2] = x2On;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2)); 
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}


init:
@1  (and (x1 >= gT - 0.1) (x1 <= gT + 0.1) (x2 >= gT + 3) (x2 <= gT + 3.5));

goal:
@1 (x1 > 35); 
@2 (x1 > 35);
@3 (x1 > 35);
@4 (x1 > 35);
