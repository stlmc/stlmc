#define K 2 
#define C 0.166

[-10, 10] d1;
[-10, 10] d2;
[-10, 10] g1;
[-10, 10] g2;

[0, 1] time;

{mode 1;

  invt: 
  flow:
        d/dt[d1] = (0.5 / C) - (K * d1); 
        d/dt[d2] = (0.5 / C) - (K * d2);
        d/dt[g1] = -0.5;
        d/dt[g2] = -0.5;
  jump:
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==> 
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2)); 
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>   
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}
{mode 2;

  invt: 
  flow:
        d/dt[d1] = (1 / C) - (K * d1);
        d/dt[d2] = -(K * d2);
        d/dt[g1] = -1;
        d/dt[g2] = 0;
  jump:
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==> 
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}
{mode 3;

  invt: 
  flow:
        d/dt[d1] = -(K * d1);
        d/dt[d2] = (1 / C) - (K * d2);
        d/dt[g1] = 0;
        d/dt[g2] = -1;
  jump:
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==> 
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}
{mode 4;

  invt: 
  flow:
        d/dt[d1] = 0;
        d/dt[d2] = (1 / C) - (K * d2);
        d/dt[g1] = 0;
        d/dt[g2] = -1;
  jump:
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==> 
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}
{mode 5;
        
  invt:   
  flow: 
        d/dt[d1] = (1 / C) - (K * d1);
        d/dt[d2] = 0;
        d/dt[g1] = -1;
        d/dt[g2] = 0;
  jump:   
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}
{mode 6;
        
  invt:   
  flow: 
        d/dt[d1] = 0;
        d/dt[d2] = 0;
        d/dt[g1] = 0;
        d/dt[g2] = 0;
  jump:   
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @2 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @3 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 > (1 - C) * d2)) ==>
          @4 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 > (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @5 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
        (and (g1 <= (1 - C) * d1) (g2 <= (1 - C) * d2)) ==>
          @6 (and (g1' = g1) (g2' = g2) (d1' = d1) (d2' = d2));
}

init:
@1  (and (g1 = 8.5) (d1 = 0) (g2 = 7.5) (d2 = 0));

goal:
@1  g1 <= 1;

