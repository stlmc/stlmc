#define V1Fast 65 
#define V1Slow 25
#define V1Keep 30
#define V2Fast 60
#define V2Slow 35
#define V2Keep 40

[0, 1000] x1;
[0, 1000] x2;

[0, 1] time;

{mode 1;

  invt: x2 >= x1; 
  flow:
        d/dt[x1] = V1Fast; 
        d/dt[x2] = V2Fast;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==> 
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}
{mode 2;

  invt: x2 >= x1; 
  flow:
        d/dt[x1] = V1Fast;
        d/dt[x2] = V2Keep;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}
{mode 3;

  invt: x2 >= x1; 
  flow:
        d/dt[x1] = V1Keep;
        d/dt[x2] = V2Fast;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}
{mode 4;

  invt: x2 >= x1; 
  flow:
        d/dt[x1] = V1Keep;
        d/dt[x2] = V2Slow;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}
{mode 5;

  invt: x2 >= x1;
  flow:
        d/dt[x1] = V1Slow;
        d/dt[x2] = V2Fast;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}
{mode 6;

  invt: x2 >= x1;
  flow:
        d/dt[x1] = V1Slow;
        d/dt[x2] = V2Slow;
  jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          @4 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          @5 (and (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          @6 (and (x1' = x1) (x2' = x2));
}

init:
@1  (and (x1 >= 0) (x1 <= 1) (x2 >= 3) (x2 <= 10));

goal:
@1 (x2 - x1) >= 4;
@2 (x2 - x1) >= 4;
@3 (x2 - x1) >= 4;
@4 (x2 - x1) >= 4;
@5 (x2 - x1) >= 4;
@6 (x2 - x1) >= 4; 

