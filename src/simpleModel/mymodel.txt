# state
# L = 0 means Right, A = 0 means Brake
bool L;
bool S;
bool A;
bool N;

# variable
[-10, 10] theta;
[-10, 20] v;
[-20, 150] x;
[-20, 150] y;

# (S, A)
{
	mode:
		L = false;
		S = true;
		A = true;
		N = false;
	inv:
		v < 15;
	flow:
		theta(t) = theta(0);
		v(t) = 2 * t + v(0);
		x(t) = (2 * t + v(0)) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = (2 * t + v(0)) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
	jump:
		# 1 (S, N)
		(v > 10) => (and (L' = false) (S' = true) (A' = false) (N' = true) (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553)
			(((75 - y) / (50 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553)
			(((60 - y) / (75 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553))) => (and (L' = false) (S' = true) (A' = false) (N' = false) (x' = x) (y' = y) (v' = v) (theta' = theta));
}

# (S, N)
{
	mode:
		L = false;
		S = true;
		A = false;
		N = true;
	inv:
		v < 15;
	flow:
		theta(t) = theta(0);
		v(t) = v(0);
		x(t) = v(0) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = v(0) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
	jump:
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553)
			(((75 - y) / (50 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553)
			(((60 - y) / (75 - x)) - (theta + (theta * theta * theta / 3)) <= 0.03553))) => (and (not L') (S') (not A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}

# (S, B)
{
	mode:
		L = false;
		S = true;
		A = false;
		N = false;
	inv:
		v < 15;
	flow:
		theta(t) = theta(0);
		v(t) = -2 * t + v(0);
		x(t) = (-2 * t + v(0)) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = (-2 * t + v(0)) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
	jump:
		# 3 (S, A)
		(and (((50 - y) / (50 - x)) > 0.03553)
			 (((75 - y) / (50 - x)) > 0.03553)
			 (((60 - y) / (75 - x)) > 0.03553)) => (and (not L') (S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 5 (R, A)
		((50 - y - 1) / (50 - x + 1) + (75 - y - 1) / (50 - x + 1) + (60 - y - 1) / (75 - x + 1) >= (50 - y + 1) / (50 - x - 1) + (75 - y + 1) / (50 - x - 1) + (60 - y + 1) / (75 - x - 1)) => (and (not L') (not S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 6 (L, A)
		((50 - y - 1) / (50 - x + 1) + (75 - y - 1) / (50 - x + 1) + (60 - y - 1) / (75 - x + 1) < (50 - y + 1) / (50 - x - 1) + (75 - y + 1) / (50 - x - 1) + (60 - y + 1) / (75 - x - 1)) => (and (L') (not S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}

'''
# (L, A)
{
	mode:
		L = true;
		S = false;
		A = true;
		N = false;
	inv:
		v < 15;
	flow:
		x(t) = (2 * t + v(0)) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = (2 * t + v(0)) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
		v(t) = 2 * t + v(0);
		theta(t) = v * 0.5773 * t + theta(0);
	jump:
		# 1 (L, N)
		(v = 10) => (and (L') (not S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) <= 0.03553)
			(((75 - y) / (50 - x)) <= 0.03553)
			(((60 - y) / (75 - x)) <= 0.03553))) => (and (not L') (S') (not A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 4 (S, A)
		(and
		(((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) < 0.017455)
		(((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) < 0.017455)) => (and (not L') (S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 7 (R, A)
		((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) > 0.017455 => (and (not L') (not S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}
# (L, N)
{
	mode:
		L = true;
		S = false;
		A = false;
		N = true;
	inv:
		v < 15;
	flow:
		x(t) = v(0) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = v(0) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
		v(t) = v(0);
		theta(t) = v * 0.5773 * t + theta(0);
	jump:
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) <= 0.03553)
			(((75 - y) / (50 - x)) <= 0.03553)
			(((60 - y) / (75 - x)) <= 0.03553))) => (and (not L') (S') (not A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 4 (S, N)
		(and
		(((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) < 0.017455)
		(((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) < 0.017455)) => (and (not L') (S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 7 (R, N)
		((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) > 0.017455 => (and (not L') (not S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}
# (R, A)
{
	mode:
		L = false;
		S = false;
		A = true;
		N = false;
	inv:
		v < 15;
	flow:
		x(t) = (2 * t + v(0)) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = (2 * t + v(0)) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
		v(t) = 2 * t + v(0);
		theta(t) = -1 * v * 0.5773 * t + theta(0);
	jump:
		# 1 (R, N)
		(v = 10) => (and (not L') (not S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) <= 0.03553)
			(((75 - y) / (50 - x)) <= 0.03553)
			(((60 - y) / (75 - x)) <= 0.03553))) => (and (not L') (S') (not A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 4 (S, A)
		(and
		(((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) < 0.017455)
		(((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) < 0.017455)) => (and (not L') (S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 8 (L, A)
		((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) > 0.017455 => (and (L') (not S') (A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}
# (R, N)
{
	mode:
		L = false;
		S = false;
		A = false;
		N = true;
	inv:
		v < 15;
	flow:
		x(t) = v(0) * (1 - (theta(0) * theta(0))/2 + (theta(0) * theta(0) * theta(0) * theta(0))/24) * t + x(0);
		y(t) = v(0) * (theta(0) - (theta(0) * theta(0) * theta(0))/6 + (theta(0) * theta(0) * theta(0) * theta(0) * theta(0))/120) * t + y(0);
		v(t) = v(0);
		theta(t) = -1 * v * 0.5773 * t + theta(0);
	jump:
		# 2 (S, B)
		(and 
		(or (((x - 50) * (x - 50) + (y - 50) * (y - 50)) <= 200)
			(((x - 50) * (x - 50) + (y - 75) * (y - 75)) <= 200)
			(((x - 75) * (x - 75) + (y - 60) * (y - 60)) <= 200))
		(or (((50 - y) / (50 - x)) <= 0.03553)
			(((75 - y) / (50 - x)) <= 0.03553)
			(((60 - y) / (75 - x)) <= 0.03553))) => (and (not L') (S') (not A') (not N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 4 (S, N)
		(and
		(((theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15) - (100 - y)/(100 - x)) < 0.017455)
		(((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) < 0.017455)) => (and (not L') (S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
		# 8 (L, N)
		((100 - y)/(100 - x) - (theta + (theta * theta * theta)/3 + (2 * theta * theta * theta * theta * theta)/15)) > 0.017455 => (and (L') (not S') (not A') (N') (x' = x) (y' = y) (v' = v) (theta' = theta));
}
'''

init:
(and (L = false) (S = true) (A = true) (N = false) (x <= 0 + 0.1) (x >= 0 - 0.1) (y <= 0 + 0.1) (y >= 0 - 0.1) (v <= 1 + 0.1) (v >= 1 - 0.1) (theta <= 0.7854) (theta >= 0.7853));

propositions:

# Gx = 100, Gy = 100
goal:
([] [0.0, 1000.0] (x > 50));
#([] [0.0, 100.0] (and (and (100 - x < 1) (100 - x > -1)) (and (100 - y < 1) (100 - y > -1))));
#([] [0.0, 1000.0] (N = false));
#([] [0.0, 1000.0] ((A = false) and (N = false)));
#([] [0.0, 1000.0] (v < 10));
#([] [0.0, 4.0] (S = true));
#([] [0.0, ])
