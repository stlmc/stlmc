bool a;
bool b;
bool c;
[-10, 10] d1;
[-10, 10] d2;
[-10, 10] g1;
[-10, 10] g2;
# state
# 000: on_1 and on_2
{
    mode:
        a == false ;
        b == false ;
        c == false ;
    inv:
    flow:
        # d/dt[d1] = (0.5 / 0.166) - (2 * d1) ;
        # d/dt[d2] = (0.5 / 0.166) - (2 * d2) ;
        # d/dt[g1] = -0.5 ;
        # d/dt[g2] = -0.5 ;
	
	# d1(t) = c_1 * (1 - 2 * t + 2 * t ** 2) + 1.5 + d1(0);
	# d2(t) = c_2 * (1 - 2 * t + 2 * t ** 2) + 1.5 + d2(0);
	# g1(t) = c_3 - 0.5 * t + g1(0);
	# g2(t) = c_4 - 0.5 * t + g2(0);

	d1(t) = (1 - 2 * t + 2 * t ** 2) + 1.5 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 1.5 + d2(0);
	g1(t) = -0.5 * t + g1(0);
	g2(t) = -0.5 * t + g2(0);


    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
{
    mode:
        a == false ;
        b == false ;
        c == true ;
    inv:
    flow:
        # d/dt[d1] = (1 / 0.166) - (2 * constd1) ;
        # d/dt[d2] = -2 * constd2 ;
        # d/dt[g1] = -1 ;
        # d/dt[g2] = 0 ;

	# d1(t) = c_1 * (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	# d2(t) = c_2 * (1 - 2 * t + 2 * t ** 2) + d2(0);
	# g1(t) = c_3 - t + g1(0);
	# g2(t) = c_4 + g2(0);
	
	d1(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);


    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
{
    mode:
        a == false ;
        b == true ;
        c == false ;
    inv:
    flow:
        # d/dt[d1] = -2 * constd1 ; 
        # d/dt[d2] = (1 / 0.166) - (2 * constd2) ;
        # d/dt[g1] = 0 ;
        # d/dt[g2] = -1 ;

	# d1(t) = c_1 * (1 - 2 * t + 2 * t ** 2) + d1(0);
	# d2(t) = c_2 * (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	# g1(t) = c_3 + g1(0);
	# g2(t) = c_3 - t + g2(0);

	d1(t) = (1 - 2 * t + 2 * t ** 2) + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;



    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
{
    mode:
        a == false ;
        b == true ;
        c == true ;
    inv:
    flow:
        # d/dt[d1] = 0 ; 
        # d/dt[d2] = (1 / 0.166) - (2 * constd2) ;
        # d/dt[g1] = 0 ;
        # d/dt[g2] = -1 ;

	# d1(t) = c_1 + d1(0);
	# d2(t) = c_2 * (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	# g1(t) = c_3 + g1(0);
	# g2(t) = c_4 - t + g2(0);
	
	d1(t) = d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;


    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
{
    mode:
        a == true ;
        b == false ;
        c == false ;
    inv:
    flow:
        # d/dt[d1] = (1 / 0.166) -(2 * constd1) ; 
        # d/dt[d2] = 0 ;
        # d/dt[g1] = -1 ;
        # d/dt[g2] = 0 ;

	# d1(t) = c_1 * (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	# d2(t) = c_2 + d2(0);
	# g1(t) = c_3 - t + g1(0);
	# g2(t) = c_4 + g2(0);

	d1(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	d2(t) = d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);


    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
{
    mode:
        a == true ;
        b == false ;
        c == true ;
    inv:
    flow:
        # d/dt[d1] = 0 ; 
        # d/dt[d2] = 0 ;
        # d/dt[g1] = 0 ;
        # d/dt[g2] = 0 ;

	d1(t) = d1(0);
	d2(t) = d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0);

    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==> 
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) );
}
init:
(and not(a) not(b) not(c) (g1 == 8.5) (d1 == 0) (g2 == 7.5) (d2 == 0)) ;

propositions:
reachability = d1 > 1.4 ;
modeFFF = (and (not a) (not b) (not c));
donegzero = d1 > 0.5 ;
dtwogzero = d2 > 0.5;
modeTFT = (and a (not b) c);

goal:
([] (0.0, 20.5) (<> [3.0, 14.0] reachability)) ;
(<> (5.0,30.0] (modeFFF -> [][7.5,25) modeFFF));
([] (0.0,50.0) (donegzero and dtwogzero));
([] (10.0,50.0] (((g1 >= 0) or (g2 >= 0)) U(1.0,15.0) modeTFT));


