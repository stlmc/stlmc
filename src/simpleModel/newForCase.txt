# Declare mode variables
real gateVel;

# Declare continuous variables
[-10, 25] trainPosition;
[-5, 5] gateHeight;

# Mode definition when gate is closing
{
    mode:
        gateVel == -2 ;
    inv:
        (and (gateHeight > 0) (gateHeight < 10)) ;
	(and (trainPosition >= -5) (trainPosition < 5.1)) ; 
    flow:
        d/dt[trainPosition] = 2;
        d/dt[gateHeight] = -1;
    jump:
        (and (trainPosition >= 4.9) (trainPosition < 5.1)) ==>
          (and (gateVel' = 3) (trainPosition' = trainPosition) (gateHeight' = gateHeight));
}

# Mode definition when gate is opening
{
    mode:
        gateVel == 3 ;
    inv:
    	gateHeight > 0;
    flow:
        trainPosition(t) = 4 * t + trainPosition(0);
	# x'(t) = gateHeight(0) + (t)
        gateHeight(t) = 0.3 * (1 + t + 0.5 * t ** 2) + gateHeight(0);
    jump:
        (and (trainPosition >= 17.9) (trainPosition < 18.1)) ==>
          (and (gateVel' = -2) (trainPosition' = trainPosition - 25) (gateHeight' = gateHeight));
}

# Initial condition
init:
(and (gateVel == -2) (trainPosition >= 0) (trainPosition < 0.1) (gateHeight < 3) (gateHeight >= 2.7) ) ;

# Proposition declare
propositions:
reachability = trainPosition < 10;
ghl5 = gateHeight < 5 ;
gClosed = gateVel == -2;
gOpen = gateVel == 3;


# STL forms requirements declare
goal:
#([] [0.0, 50.0) (trainPosition < 10 -> ghl5)) ;
#(<> [0.0,40.0] (ghl5 U[0.0, 5.0] trainPosition > 3)) ;
#([] [0.0, 20.0) (~reachability));
([] [0.0, 75.0] (gClosed U[2.0, 12.0] gOpen)) ;
