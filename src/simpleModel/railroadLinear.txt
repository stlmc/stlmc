bool a;
bool b;
[-20, 100] tx;
[0, 90] bx;
{
    mode:
        a == false;
        b == false ;
    inv:
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 0;
    jump:
        (and (35 <= tx) (tx < 50)) ==>
          (and (not a') (b') (bx' = bx) (tx' = tx));
        (and (5 <= tx) (tx < 35)) ==>
          (and (a') (not b') (bx' = bx) (tx' = tx));
        (and (-5 <= tx) (tx < 5) (bx <=80)) ==>
          (and (a') (b') (bx' = bx) (tx' = tx));
        (and (bx > 85) (tx < -5)) ==>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
{
    mode:
        a == false;
        b == true;
    inv:
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 5;
    jump:
        (and (35 <= tx) (tx < 50)) ==>
          (and (not a') (b') (bx' = bx) (tx' = tx));
        (and (5 <= tx) (tx < 35)) ==>
          (and (a') (not b') (bx' = bx) (tx' = tx));
        (and (-5 <= tx) (tx < 5) (bx <=80)) ==>
          (and (a') (b') (bx' = bx) (tx' = tx));
        (and (bx > 85) (tx < -5)) ==>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}
{
    mode:
        a == true;
        b == false;
    inv:
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = 10;
    jump:
        (and (35 <= tx) (tx < 50)) ==>
          (and (not a') (b') (bx' = bx) (tx' = tx));
        (and (5 <= tx) (tx < 35)) ==>
          (and (a') (not b') (bx' = bx) (tx' = tx));
        (and (-5 <= tx) (tx < 5) (bx <=80)) ==>
          (and (a') (b') (bx' = bx) (tx' = tx));
        (and (bx > 85) (tx < -5)) ==>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));

}
{
    mode:
        a == true;
        b == true;
    inv:
    flow:
        d/dt[tx] = -5;
        d/dt[bx] = -5;
    jump:
        (and (35 <= tx) (tx < 50)) ==>
          (and (not a') (b') (bx' = bx) (tx' = tx));
        (and (5 <= tx) (tx < 35)) ==>
          (and (a') (not b') (bx' = bx) (tx' = tx));
        (and (-5 <= tx) (tx < 5) (bx <=80)) ==>
          (and (a') (b') (bx' = bx) (tx' = tx));
        (and (bx > 85) (tx < -5)) ==>
          (and (not a') (not b') (bx' = bx) (tx' = (100 + tx)));
}

init:
(and not(a) not(b) (bx >= 0) (bx < 1) (tx >= 85) (tx <= 90)) ;

propositions:
reachability = tx < 0 ;
barg80 = bx >= 80;
barl60 = bx < 60;

goal:
(<> (0.0,50.0) reachability);
([] [20.0,40.0] (barg80 -> (<>[1.0,20.0] reachability)));
([] [3.0,50.0] (<>[5.0, 20.0] barg80));
([] [10.0,60.0] (barg80 -> ([][20.0,40.0] barl60)));


