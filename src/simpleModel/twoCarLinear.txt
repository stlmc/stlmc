bool a;
bool b;
bool c;
[0, 1000] x1;
[0, 1000] x2;
{
    mode:
        a == false;
        b == false ;
        c == false;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 65;
        d/dt[x2] = 60;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));

}
{
    mode:
        a == false;
        b == false ;
        c == true;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 65;
        d/dt[x2] = 40;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));
}
{
    mode:
        a == false;
        b == true ;
        c == false;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 30;
        d/dt[x2] = 60;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));
}
{
    mode:
        a == false;
        b == true ;
        c == true;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 30;
        d/dt[x2] = 35;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==>
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));
}
{   
    mode: 
        a == true;
        b == false ;
        c == false;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 25;
        d/dt[x2] = 60;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==> 
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));

}
{   
    mode: 
        a == true;
        b == false ;
        c == true;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 25;
        d/dt[x2] = 35;
    jump:
        (and ((x2 - x1) >= 2) ((x2 - x1) < 3)) ==>
          (and (not a') (not b') (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 3) ((x2 - x1) < 4)) ==> 
          (and (a' = false) (not b') c' (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 1) ((x2 - x1) < 2)) ==>
          (and (not a') b' (not c') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 4) ((x2 - x1) < 5)) ==>
          (and (not a') b' c' (x1' = x1) (x2' = x2));
        ((x2 - x1) < 1) ==>
          (and a' (not b') (not c') (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 5) ==>
          (and a' (not b') c' (x1' = x1) (x2' = x2));
}



init:
(and (not(a)) not(b) not(c) ((x1 >= 0) and (x1 <= 1)) (x2 <= 10) (x2 >= 3));

propositions:
disl4 = (x2 - x1) <= 4 ;
modeFTF = (and (not a) b (not c)) ;
modeFTT = (and (not a) b c) ;
modeTFF = (and a (not b) (not c)) ;

goal:
(<> [0.0,20.0] ([][0.0,5.0] (disl4))) ;
([] [0.0,10.0] (modeFTF -> <>[0.0,5.0] (~ modeFTF))) ;
([] [0.0,100.0] (x2 > x1));
(<> [10.0,40.0] ((x2 - x1) >= 4.5) -> [][0.0, 10.0] (modeFTT or modeTFF));

