bool a;
[0, 10] x1;
bool b;
[0, 10] constx1;
[0, 10] constx2;
[0, 10] x2;
{
    mode:
        a = false;
        b = false ;
    inv:
        x1 > 0;
        (x2 > 0);
    flow:
        d/dt[constx1] = 0;
        d/dt[constx2] = 0;
        d/dt[x1] = -0.025 * 2 * 9.806 / 2 * constx1 / (2 * 8) ; 
        d/dt[x2] = (0.025 * 2 * 9.806 / 2 * (constx1 - constx2)) / (2 * 9) ;
    jump:
        (and (x1 >= 5) (x2 >= 5)) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 >= 5) (x2 < 5)) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 >= 5)) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 < 5)) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));

}
{
    mode:
        a = false;
        b = true;
    inv:
        x1 > 0;
        (x2 < 9);
    flow:
        d/dt[constx1] = 0;
        d/dt[constx2] = 0;
        d/dt[x1] = -0.025 * 2 * 9.806 / 2 * constx1 / (2 * 8) ;
        d/dt[x2] = (0.015 + 0.025 * 2 * 9.806 / 2 * (constx1 - constx2)) / (2 * 9) ;
    jump:
        (and (x1 >= 5) (x2 >= 5)) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 >= 5) (x2 < 5)) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 >= 5)) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 < 5)) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
}
{
    mode:
        a = true;
        b = false;
    inv:
        x1 < 8;
        (x2 > 0);
    flow:
        d/dt[constx1] = 0;
        d/dt[constx2] = 0;
        d/dt[x1] = (0.025 - 0.025 * 2 * 9.806 / 2 * constx1) / (2 * 8) ; 
        d/dt[x2] = (0.025 * 2 * 9.806 / 2 * (constx1 - constx2)) / (2 * 9) ; 
    jump:
        (and (x1 >= 5) (x2 >= 5)) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 >= 5) (x2 < 5)) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 >= 5)) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 < 5)) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
}
{
    mode:
        a = true;
        b = true;
    inv:
        x1 < 9;
        (x2 < 8);
    flow:
        d/dt[constx1] = 0;
        d/dt[constx2] = 0;
        d/dt[x1] = (0.025 - 0.025 * 2 * 9.806 / 2 * constx1) / (2 * 8) ;
        d/dt[x2] = (0.015 + 0.025 * 2 * 9.806 / 2 * (constx1 - constx2)) / (2 * 9)
    jump:
        (and (x1 >= 5) (x2 >= 5)) =>
          (and (not a') (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 >= 5) (x2 < 5)) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 >= 5)) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
        (and (x1 < 5) (x2 < 5)) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (constx1' = x1) (constx2' = x2));
}
init:
(and (a = false) (b = false) (x1 <= 5 + 0.1) (x1 >= 5 - 0.1) (x2 <= 5 + 0.1) (x2 >= 5 - 0.1) ((constx1 = x1) and (constx2 = x2)));

propositions:
reachability = x1 > 5.1 ;
x1T = a ;
x1g5 = x1 > 5.5 ;
x1l4 = x1 < 4.9 ;
x2T = b;

goal:
([] [0.0, 50.0] (and (x1 > 0) (x1 <= 9) (x2 > 0) (x2 <= 9))) ;
(<> [5.0, 15.0] (~x1T -> <>[0.0, 7.0] (x1T and x1g5))) ;
([] [0.0, 10.0] (x1l4 -> <> [0.0, 10.0] reachability)) ;
([] [0.0, 20.0] ((x1T and x2T) -> <>[0.0, 5.0] ~(x1T and x2T))) ;



