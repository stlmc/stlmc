bool a;
bool b;
[0, 1000] x1;
[0, 1000] x2;
{
    mode:
        a == false;
        b == false ;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 25;
        d/dt[x2] = 45;
    jump:
        ((x2 - x1) < 30) ==>
          (and (not a') (not b') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 30) ((x2 - x1) < 40)) ==>
          (and (a' = false) b' (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 40) ==>
          (and a' (not b') (x1' = x1) (x2' = x2));

}
{
    mode:
        a == false;
        b == true ;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 50;
        d/dt[x2] = 45;
    jump:
        ((x2 - x1) < 30) ==>
          (and (not a') (not b') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 30) ((x2 - x1) < 40)) ==>
          (and (a' = false) b' (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 40) ==>
          (and a' (not b') (x1' = x1) (x2' = x2));
}
{
    mode:
        a == true;
        b == false ;
    inv:
        x2 >= x1;
    flow:
        d/dt[x1] = 65;
        d/dt[x2] = 45;
    jump:
        ((x2 - x1) < 30) ==>
          (and (not a') (not b') (x1' = x1) (x2' = x2));
        (and ((x2 - x1) >= 30) ((x2 - x1) < 40)) ==>
          (and (a' = false) b' (x1' = x1) (x2' = x2));
        ((x2 - x1) >= 40) ==>
          (and a' (not b') (x1' = x1) (x2' = x2));
}


init:
(and a not(b) ((x1 >= 0) and (x1 < 4)) (x2 <= 60) (x2 >= 40));

propositions:
distl40 = (x2 - x1) > 40 ;
distg20 = (x2 - x1) > 20 ;

goal:
(<> [0.0,20.0] ([][0.0, 5.0] (((x2 - x1) > 40) and distg20))) ;
