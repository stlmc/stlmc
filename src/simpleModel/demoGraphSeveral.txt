bool a;
[-20, 100] x1;
bool b;
bool l1;
bool l2;
bool l3;
[-20, 100] x2;
[-100, 100] c1;
[-100, 100] c2;
[-100, 100] c3;
[-100, 100] c4;
[-100, 100] c5;
{
    mode:
        a = false;
        b = false ;
	l1 = false;
	l2 = true;
	l3 = true;
    inv:
        x1 > 0;
        (x2 > 0);
    flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = -10;
	d/dt[c1] = 2;
	d/dt[c2] = -2;
	d/dt[c3] = -5;
	d/dt[c4] = -50;
	d/dt[c5] = 50;
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (~ a') (not b') (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));

}
{
    mode:
        a = false;
        b = true;
	l1 = true;
        l2 = true;
        l3 = false;
    inv:
        x1 > 0;
        (x2 < 50);
    flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = 10;
	d/dt[c1] = 2;
        d/dt[c2] = -2;
        d/dt[c3] = 5;
        d/dt[c4] = 50;
        d/dt[c5] = -50;
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));

}
{
    mode:
        a = true;
        b = false;
        l1 = false;
        l2 = true;
        l3 = false;
    inv:
        x1 < 50;
        (x2 > 0);
    flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = -10;
	d/dt[c1] = -2;
        d/dt[c2] = 2;
        d/dt[c3] = -5;
        d/dt[c4] = -50;
        d/dt[c5] = 50;
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));

}
{
    mode:
        a = true;
        b = true;
        l1 = true;
        l2 = false;
        l3 = true;
    inv:
        x1 < 50;
        (x2 < 50);
    flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = 10;
	d/dt[c1] = -2;
        d/dt[c2] = 2;
        d/dt[c3] = 5;
        d/dt[c4] = 50;
        d/dt[c5] = -50;
    jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = false) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5)) ;
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = false) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) =>
          (and (a' = true) (b' = true) (x1' = x1) (x2' = x2) (c1' = c1) (c2' = c2) (c3' = c3) (c4' = c4) (c5' = c5));

}
init:
(and (not(a)) not(b) (l1 = false)  (l2) (l3) (c1 = 0) (c2 >= 0.1) (c3 < -19) (c4 > 20) (c5 < 19) ((x1 <= 20 + 0.1) and (x1 >= 20 - 0.1)) (x2 <= 20 + 3.5) (x2 >= 20 + 3));

propositions:
reachability = x1 < 27 ;
x2l20 = x2 <= 20 ;
x2g10 = x1 > 10;
x1T = a ;
x2T = b ;

goal:
([] [0.0, 40.0] (~reachability)) ;
(~<> [0.0, 20.0] (x2l20 U[2.0, 12.0) x2g10)) ;
([] [0.0, 10.0] (~x2l20 U[0.0, 5.0] x1T)) ;
(<> [0.0, 20.0] ((~x1T and ~x2T) -> [][0.0, 5.0] (x1T and x2T))) ;

