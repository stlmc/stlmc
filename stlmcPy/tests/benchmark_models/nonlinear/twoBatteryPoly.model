# model description:
#
# There are two fully charged batteries, and a control
# system that switches load between these batteries.
# The goal of the control system is to achieve longer
# battery lifetime.

real startd1;
real startd2;
int b1;
int b2;
[-10, 10] d1;
[-10, 10] d2;
[-10, 10] g1;
[-10, 10] g2;
{
    mode:
        b1 = 1;
        b2 = 1;
    inv:
    flow:
	d1(t) = (1 - 2 * t + 2 * t ** 2) + 1.5 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 1.5 + d2(0);
	g1(t) = -0.5 * t + g1(0);
	g2(t) = -0.5 * t + g2(0);
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
{
    mode:
        b1 = 1;
        b2 = 2;
    inv:
    flow:
	d1(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
{
    mode:
        b1 = 2;
        b2 = 1;
    inv:
    flow:
	d1(t) = (1 - 2 * t + 2 * t ** 2) + d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
{
    mode:
        b1 = 3;
        b2 = 1;
    inv:
    flow:
	d1(t) = d1(0);
	d2(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d2(0);
	g1(t) = g1(0);
	g2(t) = g2(0) - t;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
{
    mode:
        b1 = 1;
        b2 = 3;
    inv:
    flow:
	d1(t) = (1 - 2 * t + 2 * t ** 2) + 3.01 + d1(0);
	d2(t) = d2(0);
	g1(t) = g1(0) - t;
	g2(t) = g2(0);
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
{
    mode:
        b1 = 3;
        b2 = 3;
    inv:
    flow:
        d/dt[d1] = 0 ; 
        d/dt[d2] = 0 ;
        d/dt[g1] = 0 ;
        d/dt[g2] = 0 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 2) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 2) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 1) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 1) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) =>
          (and (b1' = 3) (b2' = 3) (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2) (startd1' = d1) (startd2' = d2));
}
init:
(and (b1 = 1) (b2 = 1) (g1 = 8.5) (d1 = 0) (g2 = 7.5) (d2 = 0) (startd1 = d1) (startd2 = d2)) ;

propositions:
reachability = d1 > 1.4 ;
modeLL = (and (b1 = 1) (b2 = 1));
donegzero = d1 > 0.5 ;
dtwogzero = d2 > 0.5;
modeDD = (and (b1 = 3) (b2 = 3));

goal:
(<> [3.0, 14.0] (donegzero -> <>[0.0, 5.0) reachability)) ;
(<> (5.0,30.0] (modeLL -> [][7.5,25) modeLL));
([] (0.0,50.0) dtwogzero);
([] (10.0,50.0] (((g1 >= 0) or (g2 >= 0)) U(1.0,15.0) modeDD));


