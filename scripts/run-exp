#!/usr/bin/env python3
import os
import platform
import re
import shutil
import csv
import argparse
import subprocess
import sys
from glob import glob
from typing import Dict, List, Tuple, Set

benchmark_dir = "./benchmarks"
stlmc_dir = "../src"
dreal_dir = "../3rd_party/dreal"


def check_python_version():
    result = subprocess.run(["python3", "-V"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # >= python 3.8.6
    base_py_major, base_py_minor, base_py_else = 3, 8, 6
    [py_major_str, py_minor_str, py_else_str] = str(result.stdout.decode('utf-8')) \
        .replace("Python", "").replace("\n", "").replace(" ", "").split(".")

    py_major, py_minor, py_else = int(py_major_str), int(py_minor_str), int(py_else_str)
    py_err_msg = "STLmc supports Python version >= {}.{}.{} ({}.{}.{} not supported)" \
        .format(base_py_major, base_py_minor, base_py_else, py_major, py_minor, py_else)

    if py_major >= base_py_major:
        if py_minor >= base_py_minor:
            if py_minor == base_py_minor:
                if py_else < base_py_else:
                    ValueError(py_err_msg)
        else:
            ValueError(py_err_msg)
    else:
        raise ValueError(py_err_msg)


def check_yices_version():
    result = subprocess.run(["yices", "-V"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    base_yices_major, base_yices_minor, base_yices_else = 2, 6, 2
    yices_version_str = str(result.stdout.decode('utf-8')).split("\n")[0].replace("Yices", "").replace(" ", "")
    [yices_major_str, yices_minor_str, yices_else_str] = yices_version_str.split(".")

    yices_major, yices_minor, yices_else = int(yices_major_str), int(yices_minor_str), int(yices_else_str)
    yices_err_msg = "STLmc supports Yices version >= {}.{}.{} ({}.{}.{} not supported)" \
        .format(base_yices_major, base_yices_minor, base_yices_else, yices_major, yices_minor, yices_else)

    if yices_major >= base_yices_major:
        if yices_minor >= base_yices_minor:
            if yices_minor == base_yices_minor:
                if yices_else < base_yices_else:
                    ValueError(yices_err_msg)
        else:
            ValueError(yices_err_msg)
    else:
        raise ValueError(yices_err_msg)


def check_dreal_version():
    current_os = platform.platform()
    if "macOS" in current_os:
        dreal_exec = "{}/dReal-darwin".format(dreal_dir)
    elif "Linux" in current_os:
        dreal_exec = "{}/dReal".format(dreal_dir)
    else:
        raise ValueError("dreal is not supported for current os ({})".format(current_os))
    result = subprocess.run([dreal_exec, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    base_dreal_major, base_dreal_minor, base_dreal_else, base_dreal_else2 = 3, 16, 6, 2
    dreal_version_str = str(result.stdout.decode('utf-8')).split(" ")[1].replace("v", "")
    version_array = dreal_version_str.split(".")

    if len(version_array) < 4:
        raise Exception("STLmc does not support dReal version {} (supports >= {}.{}.{}.{})"
                        .format(".".join(version_array),
                                base_dreal_major, base_dreal_minor,
                                base_dreal_else, base_dreal_else2))

    [dreal_major_str, dreal_minor_str, dreal_else_str, dreal_else1_str] = version_array

    dreal_major, dreal_minor = int(dreal_major_str), int(dreal_minor_str)
    dreal_else, dreal_else2 = int(dreal_else_str), int(dreal_else1_str)
    dreal_err_msg = "STLmc supports dReal version >= {}.{}.{}.{} ({}.{}.{}.{} not supported)" \
        .format(base_dreal_major, base_dreal_minor, base_dreal_else, base_dreal_else2,
                dreal_major, dreal_minor, dreal_else, dreal_else2)

    if dreal_major >= base_dreal_major:
        if dreal_minor >= base_dreal_minor:
            if dreal_minor == base_dreal_minor:
                if dreal_else < base_dreal_else:
                    ValueError(dreal_err_msg)
                else:
                    if dreal_else2 < base_dreal_else2:
                        ValueError(dreal_err_msg)
        else:
            ValueError(dreal_err_msg)
    else:
        raise ValueError(dreal_err_msg)


def check_z3():
    subprocess.run(["z3", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)


def check_java_version():
    result = subprocess.run(["java", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    respond = str(result.stdout.decode('utf-8'))
    if "openjdk" not in respond:
        ValueError("Java is not available (check: \"java -version\")")


def check_program():
    check_python_version()
    check_yices_version()
    check_dreal_version()
    check_z3()
    check_java_version()


def check_config_file():
    if not os.path.exists("{}/default.cfg".format(stlmc_dir)):
        print("default configuration file does not exist")
        exit(0)


def make_log_dir(path: dir):
    path_dir = os.path.dirname(path)
    if not os.path.exists(path_dir):
        os.makedirs(path_dir)


def run_cmd(command: List[str], f):
    subprocess.run([*command], stdout=f, stderr=f,
                   text=True, encoding="utf-8")


def run_cmd_time_out(command: List[str], time_out: int, f):
    try:
        subprocess.run([*command], stdout=f, stderr=f, timeout=time_out,
                       text=True, encoding="utf-8")
        return False
    except subprocess.TimeoutExpired:
        return True
    except Exception as m:
        raise m


def check_dynamics(f_model):
    f_read = open(f_model, "r")
    # read first line
    d = f_read.readline()
    f_read.close()

    if "linear" in d:
        return "linear"
    elif "poly" in d:
        return "poly"
    elif "ode" in d:
        return "ode"
    else:
        raise Exception("cannot find dynamics information for logging")


# remove ".." , "." , "*"
def remove_unnecessary_symbol(p: str):
    name_list = list()
    p_splits = p.split("/")
    for sp in p_splits:
        if sp != "" and sp != "." and sp != "..":
            name_list.append(sp)
    return name_list


def make_name_from_glob(p: str) -> str:
    return "-".join(remove_unnecessary_symbol(p))


def make_log_name_from_glob(p: str) -> str:
    return "log-{}".format(make_name_from_glob(p))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("dirs", metavar="DIRS", type=str, nargs="*",
                        help="model directories or files to be run")
    parser.add_argument("-t", "-time-out", metavar="TO", nargs='?', type=int,
                        help="time-out in seconds (default: no timeout)")
    parser.add_argument("-o", "-out", metavar="OUT", nargs='?', type=str,
                        help="set output log directory name (default: \'log\')", default="log")
    args = parser.parse_args()

    try:

        if len(args.dirs) == 0:
            raise Exception("should give directories to be run")

        non_exists_dir = list()
        for directory in args.dirs:
            if not os.path.exists(directory):
                non_exists_dir.append(directory)

        error = list()
        if len(non_exists_dir) > 0:
            if len(non_exists_dir) > 1:
                error.append("\"{}\" do not exist".format(" , ".join(non_exists_dir)))
            else:
                error.append("\"{}\" does not exist".format(non_exists_dir[0]))

        if len(error) > 0:
            raise ValueError("\n".join(error))

        extra_cmds = list()

        check_program()
        check_config_file()

        # directory included model file --> model cfg, specific cfg
        model_cfg_dict: Dict[str, Tuple[str, Set[str]]] = dict()

        updated_dirs = list()
        for directory in args.dirs:
            if os.path.isfile(directory):
                updated_dirs.append(os.path.dirname(directory))
            else:
                updated_dirs.append(directory)

        for directory in updated_dirs:
            for root, dirs, files in os.walk(directory):
                for file in files:
                    split_list = os.path.basename(file).split(".")
                    if len(split_list) != 2:
                        raise ValueError("file name cannot include \".\" (caused by \"{}/{}\")".format(root, file))
                    file_name, file_ext = split_list[0], split_list[1]

                    root_splits = root.split("/")
                    if root_splits[-1] == "":
                        root = "/".join(root_splits[:-1])

                    full_model_file_name = "{}/{}.model".format(root, file_name)
                    full_file_name = "{}/{}".format(root, file)

                    if file_ext == "model":
                        if full_model_file_name not in model_cfg_dict:
                            model_cfg_dict[full_model_file_name] = ("", set())

                    elif file_ext == "cfg":
                        is_specific = False
                        # model specific
                        if "-" in file_name:
                            file_name = file_name.split("-")[0]
                            full_model_file_name = "{}/{}.model".format(root, file_name)
                            is_specific = True

                        if full_model_file_name in model_cfg_dict:
                            m_cfg, cfgs = model_cfg_dict[full_model_file_name]
                            if is_specific:
                                cfgs.add(full_file_name)
                            else:
                                model_cfg_dict[full_model_file_name] = (full_file_name, cfgs)

                        else:
                            if is_specific:
                                model_cfg_dict[full_model_file_name] = ("", {full_file_name})
                            else:
                                model_cfg_dict[full_model_file_name] = (full_file_name, set())

        cmds = list()
        for model_dir in model_cfg_dict:
            m_cfg, cfgs = model_cfg_dict[model_dir]
            for cfg in cfgs:
                if len(extra_cmds) > 0:
                    cmds.append((cfg, ["{}/stlmc".format(stlmc_dir), model_dir,
                                       "-default-cfg", "{}/default.cfg".format(stlmc_dir),
                                       "-model-specific-cfg", cfg, " ".join(extra_cmds),
                                       "-executable-path", dreal_dir]))
                else:
                    cmds.append((cfg, ["{}/stlmc".format(stlmc_dir), model_dir,
                                       "-default-cfg", "{}/default.cfg".format(stlmc_dir),
                                       "-model-specific-cfg", cfg, "-executable-path", dreal_dir]))

        if len(cmds) == 0:
            raise ValueError(
                "no model file exists under the given directories or files {{{}}}".format(" , ".join(args.dirs)))

        for cfg_dir, cmd in cmds:
            clean_cfg_dir = "/".join(remove_unnecessary_symbol(cfg_dir))
            clean_cfg_dir_name = os.path.splitext(clean_cfg_dir)[0]

            log_dir_name = "{}/{}.log".format(args.o, clean_cfg_dir_name)
            for goal in ["f1", "f2", "f3"]:
                if goal in cfg_dir:
                    make_log_dir(log_dir_name)
                    print("[run]")
                    print("  model dir: {}".format(cmd[1]))
                    print("  goal: {}".format(goal))

                    m_name = os.path.basename(cmd[1]).split(".")[0]
                    m_dyn = check_dynamics(cmd[1])

                    log_f = open(log_dir_name, "w")
                    if args.t is not None:
                        # add log dir
                        is_timeout = run_cmd_time_out(cmd, args.t, log_f)
                        if is_timeout:
                            log_f.write("timeout")
                    else:
                        run_cmd(cmd, log_f)
                    log_f.write("# logging (dynamics: {})\n".format(m_dyn))
                    log_f.write("# logging (model: {})\n".format(m_name))
                    log_f.write("# logging (goal: {})\n".format(goal))
                    log_f.close()
                    print("  write log: {}".format(log_dir_name))
                    print("  done.")

    except FileNotFoundError as err:
        exec_file = str(err).split("\'")[1]
        print("error: cannot find {} executable file".format(exec_file))
    except ValueError as err:
        print("error: {}".format(err))
    except Exception as err:
        print("error: {}".format(err))
