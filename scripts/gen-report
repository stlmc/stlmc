#!/usr/bin/env python3
import argparse
import csv
import os
import re
from glob import glob
from typing import List, Set


def remove_ansi_color(colored_string):
    return re.sub(r'\033\[(\d|;)+?m', '', colored_string)


def find_size(input_string):
    result = re.search(r'size\s:\s[1-9]+[0-9]*', input_string)
    if result:
        return result.group().replace(" ", "").split(":")[1]
    return None


def find_threshold(input_string):
    result = re.search(r'threshold\s:\s[0-9]+(\.)*[0-9]*', input_string)
    if result:
        return result.group().replace(" ", "").split(":")[1]
    return None


def find_time_bound(input_string):
    result = re.search(r'time\sbound:\s[1-9]+[0-9]*', input_string)
    if result:
        return result.group().replace(" ", "").split(":")[1]
    return None


def find_last_running_time(input_string):
    result = re.findall(r'running\stime\s[0-9]+\.[0-9]*', input_string)
    if result:
        return str(result[-1]).split(" ")[2]
    return None


def find_result(input_string):
    result = re.search(r'result\s:\sFalse\sat\sbound\s[1-9]+[0-9]*', input_string)
    if result:
        return "false"

    result = re.search(r'result\s:\sTrue\sup\sto\sbound\s[1-9]+[0-9]*', input_string)
    if result:
        return "true"

    return None


def find_bound(input_string):
    result = re.search(r'result\s:\sFalse\sat\sbound\s[1-9]+[0-9]*', input_string)
    if result:
        return result.group().replace(" ", "").split("bound")[1]

    result = re.search(r'result\s:\sTrue\sup\sto\sbound\s[1-9]+[0-9]*', input_string)
    if result:
        return result.group().replace(" ", "").split("bound")[1]

    return None


def find_path_loops(input_string):
    result = re.findall(r'total\sloop\s:\s[1-9]+[0-9]*', input_string)
    if result:
        return str(result[-1]).split(":")[1]

    return None


def find_dynamics(input_string):
    result = re.search(r'#\slogging\s\(dynamics:\s[a-z]*\)', input_string)
    if result:
        return result.group().replace(" ", "").replace("(", "").replace(")", "").split(":")[1]
    return None


def find_model_name(input_string):
    result = re.search(r'#\slogging\s\(model:\s([a-z]|[0-9])*\)', input_string)
    if result:
        return result.group().replace(" ", "").replace("(", "").replace(")", "").split(":")[1]
    return None


def find_goal(input_string):
    result = re.search(r'#\slogging\s\(goal:\s([a-z]|[0-9])*\)', input_string)
    if result:
        return result.group().replace(" ", "").replace("(", "").replace(")", "").split(":")[1]
    return None


def find_formula(input_string):
    result = re.search(r'goal\s:\s(.*?)\n', input_string)
    if result:
        return result.group().replace("\n", "").split(":")[1]
    return None


def write_csv(data: List[List[str]], file_name):
    header = ["dynamics", "model", "label", "formula", "time bound", "threshold", "size", "time", "result",
              "bound", "scenarios", "algorithm"]

    rows = list()
    rows.append(header)
    rows.extend(data)

    with open(file_name, "w", newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerows(rows)


def find_from_csv(model: str, dynamic: str, data: List[List[str]]):
    csv_dict = dict()
    for d in data:
        if d[0] == dynamic and d[1] == model:
            if d[-1] == "T/O":
                csv_dict[d[2]] = d[4:][:-1][:-1][:-1]
                csv_dict[d[2]][2] = "$\\textsf{T/O}$"
            else:
                csv_dict[d[2]] = d[4:][:-1][:-1]

            for i, e in enumerate(csv_dict[d[2]]):
                if e == "-":
                    csv_dict[d[2]][i] = ""
    print(csv_dict)
    return csv_dict


def read_log(log_name):
    fd = open(log_name, "r")
    s = fd.read()
    uncolored_string = remove_ansi_color(s)
    dy = find_dynamics(uncolored_string)
    model = find_model_name(uncolored_string)
    g = find_goal(uncolored_string)
    f = find_formula(uncolored_string)
    if "timeout" in uncolored_string:
        data = [dy, model, g, "-", "-", "-", "-", "-", "-", "-", "-", "-", "T/O"]
    else:
        tb = find_time_bound(uncolored_string)
        eps = find_threshold(uncolored_string)
        size = find_size(uncolored_string)
        time = find_last_running_time(uncolored_string)
        result = find_result(uncolored_string)
        k = find_bound(uncolored_string)
        data = [dy, model, g, f, tb, eps, size, time, result, k]

        loops = find_path_loops(uncolored_string)
        if loops is not None:
            data.append(loops)
        else:
            data.append("-")
        data.append("2-step" if dy == "ode" else "1-step")
    fd.close()
    return data


if __name__ == "__main__":
    default_dir = "./log"
    parser = argparse.ArgumentParser()
    parser.add_argument("dir", nargs="?", metavar="D", type=str, help="log directory", default=default_dir)
    args = parser.parse_args()

    try:
        log_files = list()
        log_data = list()

        if os.path.isfile(args.dir):
            raise ValueError("\'{}\' is a file (should provide directory).".format(args.dir))

        if not os.path.exists(args.dir):
            if args.dir == default_dir:
                raise ValueError("The default log directory \'{}\' does not exist".format(args.dir))
            else:
                raise ValueError("\'{}\' does not exist".format(args.dir))

        for root, dirs, files in os.walk(args.dir):
            for file in files:
                if os.path.splitext(file)[1] != ".log":
                    continue
                log_file = "{}/{}".format(root, file)
                log_data.append(read_log(log_file))
        log_file_name = args.dir.replace("/", "").replace(".", "").replace("..", "")
        csv_file_name = "{}-report.csv".format(log_file_name)
        write_csv(log_data, csv_file_name)

        print("write \'{}\' using the log files in \'{}\'".format(csv_file_name, args.dir))

        log_data.clear()

    except Exception as err:
        print("error: {}".format(err))
