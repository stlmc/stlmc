bool a;
bool b;
bool c;
[-10, 10] d1;
[-10, 10] d2;
[-10, 10] g1;
[-10, 10] g2;
[-10, 10] constd1;
[-10, 10] constd2;
{
    mode:
        a == false ;
        b == false ;
        c == false ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = (0.5 / 0.166) - (2 * constd1) ;
        d/dt[d2] = (0.5 / 0.166) - (2 * constd2) ;
        d/dt[g1] = -0.5 ;
        d/dt[g2] = -0.5 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
{
    mode:
        a == false ;
        b == false ;
        c == true ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = (1 / 0.166) - (2 * constd1) ;
        d/dt[d2] = -2 * constd2 ;
        d/dt[g1] = -1 ;
        d/dt[g2] = 0 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
{
    mode:
        a == false ;
        b == true ;
        c == false ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = -2 * constd1 ; 
        d/dt[d2] = (1 / 0.166) - (2 * constd2) ;
        d/dt[g1] = 0 ;
        d/dt[g2] = -1 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
{
    mode:
        a == false ;
        b == true ;
        c == true ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = 0 ; 
        d/dt[d2] = (1 / 0.166) - (2 * constd2) ;
        d/dt[g1] = 0 ;
        d/dt[g2] = -1 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
{
    mode:
        a == true ;
        b == false ;
        c == false ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = (1 / 0.166) -(2 * constd1) ; 
        d/dt[d2] = 0 ;
        d/dt[g1] = -1 ;
        d/dt[g2] = 0 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
{
    mode:
        a == true ;
        b == false ;
        c == true ;
    inv:
    flow:
        d/dt[constd1] = 0 ;
        d/dt[constd2] = 0 ;
        d/dt[d1] = 0 ; 
        d/dt[d2] = 0 ;
        d/dt[g1] = 0 ;
        d/dt[g2] = 0 ;
    jump:
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 > ((1 - 0.166) * d2))) ==>
          (and (not a') (b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 > ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (not c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
        (and (g1 <= ((1 - 0.166) * d1)) (g2 <= ((1 - 0.166) * d2))) ==>
          (and (a') (not b') (c') (d1' = d1) (d2' = d2) (g1' = g1) (g2' = g2));
}
init:
(and not(a) not(b) not(c) (g1 == 8.5) (d1 == 0) (g2 == 7.5) (d2 == 0) (constd1 == d1) (constd2 == d2)) ;

propositions:
reachability = d1 > 1.4 ;

goal:
([] (0.0, 20.5) (<> [3.0, 14.0] reachability)) ;



