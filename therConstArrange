(and (and (or (and (and (<= fx_0_t (/ (+ fx_0_t sx_0_t) 2)) (<= sx_0_t (/ (+ fx_0_t sx_0_t) 2))) (and mf_1 ms_1 (= fx_1_0 fx_0_t) (= sx_1_0 sx_0_t))) 
              (and (and (<= fx_0_t (/ (+ fx_0_t sx_0_t) 2)) (> sx_0_t (/ (+ fx_0_t sx_0_t) 2))) (and mf_1 (not ms_1) (= fx_1_0 fx_0_t) (= sx_1_0 sx_0_t))) 
              (and (and (> fx_0_t (/ (+ fx_0_t sx_0_t) 2)) (<= sx_0_t (/ (+ fx_0_t sx_0_t) 2))) (and (not mf_1) ms_1 (= fx_1_0 fx_0_t) (= sx_1_0 sx_0_t))) 
              (and (and (> fx_0_t (/ (+ fx_0_t sx_0_t) 2)) (> sx_0_t (/ (+ fx_0_t sx_0_t) 2))) (and (not mf_1) (not ms_1) (= fx_1_0 fx_0_t) (= sx_1_0 sx_0_t))))) 

     (and (or (and (and mf_0 ms_0) (= [fx_0_t sx_0_t] (integral 0. time0 [fx_0_0 sx_0_0] flow_ms))
 (and (and (and (< fx_0_t 50) (< sx_0_t 50)) (and (< fx_0_0 50) (< sx_0_0 50))) (forall_t {fx: 0.7, sx: 1} [0. time0] (and (< fx_0_t 50) (< sx_0_t 50))))) 
              (and (and (not mf_0) ms_0) (= [fx_0_t sx_0_t] (integral 0. time0 [fx_0_0 sx_0_0] flow_ms))
 (and (and (and (> fx_0_t 0) (< sx_0_t 50)) (and (> fx_0_0 0) (< sx_0_0 50))) (forall_t {fx: (- 0.4), sx: 1} [0. time0] (and (> fx_0_t 0) (< sx_0_t 50))))) 
              (and (and mf_0 (not ms_0)) (= [fx_0_t sx_0_t] (integral 0. time0 [fx_0_0 sx_0_0] flow_(not ms)))
 (and (and (and (< fx_0_t 50) (> sx_0_t 0)) (and (< fx_0_0 50) (> sx_0_0 0))) (forall_t {fx: 0.7, sx: (- 0.6)} [0. time0] (and (< fx_0_t 50) (> sx_0_t 0))))) 
              (and (and (not mf_0) (not ms_0)) (= [fx_0_t sx_0_t] (integral 0. time0 [fx_0_0 sx_0_0] flow_(not ms)))
 (and (and (and (> fx_0_t 0) (> sx_0_t 0)) (and (> fx_0_0 0) (> sx_0_0 0))) (forall_t {fx: (- 0.4), sx: (- 0.6)} [0. time0] (and (> fx_0_t 0) (> sx_0_t 0))))))

           (or (and (and mf_1 ms_1) (= [fx_1_t sx_1_t] (integral 0. time1 [fx_1_0 sx_1_0] flow_ms))
 (and (and (and (< fx_1_t 50) (< sx_1_t 50)) (and (< fx_1_0 50) (< sx_1_0 50))) (forall_t {fx: 0.7, sx: 1} [0. time1] (and (< fx_1_t 50) (< sx_1_t 50))))) 

               (and (and (not mf_1) ms_1) (= [fx_1_t sx_1_t] (integral 0. time1 [fx_1_0 sx_1_0] flow_ms))
 (and (and (and (> fx_1_t 0) (< sx_1_t 50)) (and (> fx_1_0 0) (< sx_1_0 50))) (forall_t {fx: (- 0.4), sx: 1} [0. time1] (and (> fx_1_t 0) (< sx_1_t 50))))) 

               (and (and mf_1 (not ms_1)) (= [fx_1_t sx_1_t] (integral 0. time1 [fx_1_0 sx_1_0] flow_(not ms)))
 (and (and (and (< fx_1_t 50) (> sx_1_t 0)) (and (< fx_1_0 50) (> sx_1_0 0))) (forall_t {fx: 0.7, sx: (- 0.6)} [0. time1] (and (< fx_1_t 50) (> sx_1_t 0))))) 

               (and (and (not mf_1) (not ms_1)) (= [fx_1_t sx_1_t] (integral 0. time1 [fx_1_0 sx_1_0] flow_(not ms)))
 (and (and (and (> fx_1_t 0) (> sx_1_t 0)) (and (> fx_1_0 0) (> sx_1_0 0))) (forall_t {fx: (- 0.4), sx: (- 0.6)} [0. time1] (and (> fx_1_t 0) (> sx_1_t 0))))))))


flowConsts.append(Or(*([And(i.substitution(self.makeSubMode(k)), 
                            Integral(self.makeSubVars(k, 't'), self.makeSubVars(k, '0'), time, str(i.children).replace(",","").replace(" ","").replace("(","").replace(")",""), self.flowDictionary(self.flow[i])), 
                            Forall(self.flowDictionary(self.flow[i]), time, self.inv[i], self.makeSubVars(k, '0'), self.makeSubVars(k, 't'), self.makeSubMode(k))) for i in self.flow.keys()])))
